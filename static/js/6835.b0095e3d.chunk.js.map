{"version":3,"file":"static/js/6835.b0095e3d.chunk.js","mappings":"sKAQMA,EAAY,SAAC,GAAiC,IAA/BC,EAA8B,EAA9BA,QACjB,OACI,SAAC,KAAD,CACIC,UAAWC,GAAAA,CAAW,MAAO,YAAcF,EAAS,cAAe,WAAY,mBAC/EG,GAAG,kBACHC,GAAG,IACHC,QAAS,kBAAMC,OAAOC,SAAS,CAAEC,IAAK,EAAGC,SAAU,YAJvD,UAMI,SAAC,IAAD,CAAaC,KAAK,WAAWT,UAAU,gBAKnDF,EAAUY,aAAe,CACrBX,QAAS,WAGb,O,uHCyBA,EAvCqB,YAMkB,IALnCY,EAKkC,EALlCA,cACAC,EAIkC,EAJlCA,SACAC,EAGkC,EAHlCA,SACAC,EAEkC,EAFlCA,SACAC,EACkC,EADlCA,UAKMC,GAAUC,EAAAA,EAAAA,IAAqB,CAAEN,cAAAA,EAAeC,SAAAA,IAElDM,EAIAF,EAJAE,aACAC,EAGAH,EAHAG,SACAC,EAEAJ,EAFAI,QACaC,EACbL,EADAM,UAAaD,OAGjB,OACI,iBAAMP,SAAUI,EAAaJ,GAAWd,UAAWe,EAAWQ,YAAU,EAAxE,SACKC,MAAMC,QAAQZ,GACTA,EAASa,KAAI,SAACC,GACV,OAAOA,EAAMC,OAASD,EAAMC,MAAMC,KAC5BC,EAAAA,cAAoBH,EAAMI,MAA1B,6BAEWJ,EAAMC,OAFjB,IAGQT,SAAAA,EACAa,IAAKL,EAAMC,MAAMC,KACjBR,OAAAA,EACAD,QAAAA,MAGRO,KAEVd,K,wmBCpBZoB,EAAe,SAAC,GAWC,IAVnBF,EAUkB,EAVlBA,KACAF,EASkB,EATlBA,KACAK,EAQkB,EARlBA,YACAf,EAOkB,EAPlBA,SACAE,EAMkB,EANlBA,OACAc,EAKkB,EALlBA,KACAC,EAIkB,EAJlBA,KACApC,EAGkB,EAHlBA,UACAqC,EAEkB,EAFlBA,YACGC,GACe,YAClB,OACI,iCACI,SAACC,EAAA,WAAD,gBACIR,KAAMA,EACNG,YAAaA,EACbL,KAAMA,EACNW,GAAIL,EACJjC,GAAI2B,EACJY,IAAK,SAACC,GACEL,GAAaA,EAAYK,IAEjC1C,UAAWA,EACX2C,aAAWtB,IAAUA,EAAOQ,KACvBV,EAAWA,EAASU,GAAQ,IAXrC,IAYIO,KAAMA,GACFE,IAGPjB,GAAUA,EAAOQ,KACd,SAACU,EAAA,mBAAD,CAAuBR,KAAK,UAAU/B,UAAU,UAAhD,SACKqB,EAAOQ,GAAP,cAQfe,EAAa,SAAC,GAYG,IAXnBb,EAWkB,EAXlBA,KACAc,EAUkB,EAVlBA,MACAhB,EASkB,EATlBA,KAEAV,GAOkB,EARlBe,YAQkB,EAPlBf,UACAE,EAMkB,EANlBA,OAGArB,GAGkB,EALlBmC,KAKkB,EAJlBC,KAIkB,EAHlBpC,WACAqC,EAEkB,EAFlBA,YACGC,GACe,YAClB,OACI,iCACI,SAACC,EAAA,SAAD,gBACIR,KAAMA,EACNc,MAAOA,EACPhB,KAAMA,EACN3B,GAAI2B,EACJY,IAAK,SAACC,GACEL,GAAaA,EAAYK,IAEjC1C,UAAWA,EACX2C,aAAWtB,IAAUA,EAAOQ,KACvBV,EAAWA,EAASU,GAAQ,IAC7BS,IAGPjB,GAAUA,EAAOQ,KACd,SAACU,EAAA,mBAAD,CAAuBR,KAAK,UAA5B,SAAuCV,EAAOQ,GAAP,cAOjDiB,EAAc,SAAC,GAYE,IAXnBf,EAWkB,EAXlBA,KACAc,EAUkB,EAVlBA,MACAhB,EASkB,EATlBA,KAEAV,GAOkB,EARlBe,YAQkB,EAPlBf,UACAE,EAMkB,EANlBA,OAGArB,GAGkB,EALlBmC,KAKkB,EAJlBC,KAIkB,EAHlBpC,WACAqC,EAEkB,EAFlBA,YACGC,GACe,YAClB,OACI,iCACI,SAACC,EAAA,UAAD,gBACIR,KAAMA,EACNc,MAAOA,EACPhB,KAAMA,EACN3B,GAAI2B,EACJY,IAAK,SAACC,GACEL,GAAaA,EAAYK,IAEjC1C,UAAWA,EACX2C,aAAWtB,IAAUA,EAAOQ,KACvBV,EAAWA,EAASU,GAAQ,IAC7BS,IAGPjB,GAAUA,EAAOQ,KACd,SAACU,EAAA,mBAAD,CAAuBR,KAAK,UAA5B,SAAuCV,EAAOQ,GAAP,cAOjDkB,EAAiB,SAAC,GAaD,IAZnBC,EAYkB,EAZlBA,UACAjB,EAWkB,EAXlBA,KACAF,EAUkB,EAVlBA,KACAK,EASkB,EATlBA,YACAC,EAQkB,EARlBA,KACAhB,EAOkB,EAPlBA,SACAE,EAMkB,EANlBA,OACAe,EAKkB,EALlBA,KACApC,EAIkB,EAJlBA,UACAiD,EAGkB,EAHlBA,cACAZ,EAEkB,EAFlBA,YACGC,GACe,YAClB,OACI,UAACY,EAAA,EAAD,YACI,SAACA,EAAA,OAAD,CAAiBlD,UAAWiD,EAA5B,SAA4CD,IAClC,WAATjB,GACG,SAACe,GAAD,QACIf,KAAMA,EACNF,KAAMA,EACNK,YAAaA,EACbG,YAAaA,EACbF,KAAMA,EACNd,OAAQA,EACRF,SAAUA,EACVnB,UAAWA,EACXoC,KAAMA,GACFE,KAGR,SAACL,GAAD,QACIF,KAAMA,EACNF,KAAMA,EACNK,YAAaA,EACbG,YAAaA,EACbF,KAAMA,EACNd,OAAQA,EACRF,SAAUA,EACVnB,UAAWA,EACXoC,KAAMA,GACFE,QAqIxB,EA9HkB,SAAC,GAiBI,IAhBnBU,EAgBkB,EAhBlBA,UACAH,EAekB,EAflBA,MACAd,EAckB,EAdlBA,KACAF,EAakB,EAblBA,KACAK,EAYkB,EAZlBA,YACAf,EAWkB,EAXlBA,SACAE,EAUkB,EAVlBA,OAEArB,GAQkB,EATlBoB,QASkB,EARlBpB,WACAmD,EAOkB,EAPlBA,eACAC,EAMkB,EANlBA,eACAH,EAKkB,EALlBA,cACAZ,EAIkB,EAJlBA,YACAgB,EAGkB,EAHlBA,OACAjB,EAEkB,EAFlBA,KACGE,GACe,YAEZH,EAAgB,aAATJ,EAAsB,WAAsB,WAATA,EAAoB,SAAW,QAE/E,OACI,8BACc,WAATA,GACG,kCAAOA,KAAMA,EAAMF,KAAMA,GAAWV,EAAWA,EAASU,GAAQ,IAASS,KAEzE,8BACc,aAATP,GAAgC,UAATA,GACpB,SAACQ,EAAA,QAAD,CAAYvC,UAAWoD,EAAvB,UACI,SAACR,GAAD,QACIb,KAAMA,EACNc,MAAOA,EACPhB,KAAMA,EACNK,YAAaA,EACbG,YAAaA,EACbhB,OAAQA,EACRF,SAAUA,EACVgB,KAAMA,EACNnC,UAAWA,EACXoC,KAAMA,GACFE,MAGH,WAATP,GACA,UAACQ,EAAA,QAAD,CAAYvC,UAAWoD,EAAvB,UACKP,IACG,iCACI,SAACN,EAAA,QAAD,CAAYvC,UAAWmD,EAAvB,SAAwCN,IACvCQ,GAAUA,KAGlBL,GACG,SAACD,GAAD,QACIhB,KAAMA,EACNiB,UAAWA,EACXnB,KAAMA,EACNM,KAAMA,EACNc,cAAeA,EACff,YAAaA,EACbG,YAAaA,EACbhB,OAAQA,EACRF,SAAUA,EACVnB,UAAWA,EACXoC,KAAMA,GACFE,KAGR,SAACQ,GAAD,QACIf,KAAMA,EACNF,KAAMA,EACNK,YAAaA,EACbG,YAAaA,EACbhB,OAAQA,EACRF,SAAUA,EACVgB,KAAMA,EACNnC,UAAWA,EACXoC,KAAMA,GACFE,QAKhB,UAACC,EAAA,QAAD,CAAYvC,UAAWoD,EAAvB,UACKP,IACG,iCACI,SAACN,EAAA,QAAD,CAAYvC,UAAWmD,EAAvB,SAAwCN,IACvCQ,GAAUA,KAGlBL,GACG,SAACD,GAAD,QACIhB,KAAMA,EACNiB,UAAWA,EACXnB,KAAMA,EACNM,KAAMA,EACNc,cAAeA,EACff,YAAaA,EACbG,YAAaA,EACbhB,OAAQA,EACRF,SAAUA,EACVnB,UAAWA,EACXoC,KAAMA,GACFE,KAGR,SAACL,GAAD,QACIF,KAAMA,EACNF,KAAMA,EACNK,YAAaA,EACbG,YAAaA,EACbhB,OAAQA,EACRF,SAAUA,EACVgB,KAAMA,EACNnC,UAAWA,EACXoC,KAAMA,GACFE,a,2ICzQxC,EAnCa,WACT,OACI,qBAAStC,UAAU,mCAAnB,WACI,SAACsD,EAAA,EAAD,WACI,SAACC,EAAA,EAAD,CAAKvD,UAAU,yBAAf,UACI,UAACwD,EAAA,EAAD,CAAKC,GAAI,EAAGzD,UAAU,cAAtB,WACI,eAAIA,UAAU,kBAAd,yBACA,cAAGA,UAAU,wBAAb,4FAMZ,gBAAKA,UAAU,eAAf,UACI,gBACI0D,MAAM,SACNC,OAAO,OACPC,QAAQ,cACRC,QAAQ,MACRC,MAAM,6BALV,UAOI,cAAG5D,GAAG,UAAU6D,OAAO,OAAOC,YAAY,IAAIC,KAAK,OAAOC,SAAS,UAAnE,UACI,cAAGhE,GAAG,QAAQ+D,KAAK,OAAnB,UACI,iBACIE,EAAE,iHACFjE,GAAG,qB,0FC0InC,EA1JkB,WAEd,IAAMkE,GAAiBC,EAAAA,EAAAA,GACnBC,EAAAA,KAAaC,MAAM,CACfC,MAAOF,EAAAA,KAAaG,SAAS,2BAC7BC,MAAOJ,EAAAA,KAAaG,SAAS,0BAC7BE,MAAOL,EAAAA,KAAaG,SAAS,sBAAsBE,MAAM,4BACzDC,QAASN,EAAAA,KAAaG,SAAS,2BAKjCzD,GAAUC,EAAAA,EAAAA,IAAQ,CAAEL,SAAUwD,IAEhClD,EAIAF,EAJAE,aACAC,EAGAH,EAHAG,SACAC,EAEAJ,EAFAI,QACaC,EACbL,EADAM,UAAaD,OAMjB,OACI,oBAASrB,UAAU,yCAAnB,UACI,UAACsD,EAAA,EAAD,YACI,UAACC,EAAA,EAAD,CAAKvD,UAAU,qBAAf,WACI,SAACwD,EAAA,EAAD,CAAKC,GAAI,EAAT,UACI,SAACoB,EAAA,EAAD,CAAM7E,UAAU,cAAhB,UACI,UAAC6E,EAAA,OAAD,CAAW7E,UAAU,aAArB,WACI,eAAIA,UAAU,sBAAd,iCACA,cAAGA,UAAU,OAAb,qFAIA,iBAAMc,SAAUI,GAd3B,eAcW,UACI,UAACqC,EAAA,EAAD,YACI,SAACC,EAAA,EAAD,CAAKsB,GAAI,EAAT,UACI,SAAC,IAAD,CACI/C,KAAK,OACLF,KAAK,QACLgB,MAAM,aACNX,YAAY,kBACZkB,eAAgB,OAChBjC,SAAUA,EACVE,OAAQA,EACRD,QAASA,OAGjB,SAACoC,EAAA,EAAD,CAAKsB,GAAI,EAAT,UACI,SAAC,IAAD,CACI/C,KAAK,OACLF,KAAK,QACLgB,MAAM,YACNX,YAAY,iBACZkB,eAAgB,OAChBjC,SAAUA,EACVE,OAAQA,EACRD,QAASA,OAGjB,SAACoC,EAAA,EAAD,CAAKC,GAAI,GAAT,UACI,SAAC,IAAD,CACI1B,KAAK,QACLF,KAAK,QACLgB,MAAM,aACNX,YAAY,aACZkB,eAAgB,OAChBjC,SAAUA,EACVE,OAAQA,EACRD,QAASA,OAGjB,SAACoC,EAAA,EAAD,CAAKC,GAAI,GAAT,UACI,SAAC,IAAD,CACI1B,KAAK,WACLF,KAAK,UACLgB,MAAM,UACNX,YAAY,uBACZE,KAAM,EACNgB,eAAgB,OAChBjC,SAAUA,EACVE,OAAQA,EACRD,QAASA,OAGjB,SAACoC,EAAA,EAAD,CAAKC,GAAG,OAAOzD,UAAU,OAAzB,UACI,UAAC+E,EAAA,EAAD,CAAQhD,KAAK,SAAb,kBAEI,iBAAM/B,UAAU,+BAAhB,UACI,SAAC,IAAD,CAAaS,KAAK,6BAUlD,SAAC+C,EAAA,EAAD,CAAKC,GAAI,CAAEuB,OAAQ,EAAGC,KAAM,GAA5B,UACI,gBAAKC,MAAO,CAAEvB,OAAQ,SAAtB,UACI,SAAC,KAAD,CAAgBwB,YAAa,GAAIC,cAAe,CAAEC,IAAK,UAAWC,KAAM,qBAIpF,UAAC/B,EAAA,EAAD,CAAKvD,UAAU,0BAAf,WACI,SAACwD,EAAA,EAAD,CAAKsB,GAAI,EAAT,UACI,iBAAK9E,UAAU,sCAAf,WACI,iBAAMA,UAAU,qGAAhB,UACI,SAAC,IAAD,CAAaS,KAAK,OAAOT,UAAU,yBAEvC,iBAAKA,UAAU,cAAf,WACI,eAAIA,UAAU,gBAAd,oBACA,SAAC,KAAD,CAAMG,GAAG,IAAIH,UAAU,+BAAvB,0CAOZ,SAACwD,EAAA,EAAD,CAAKsB,GAAI,EAAT,UACI,iBAAK9E,UAAU,sCAAf,WACI,iBAAMA,UAAU,mGAAhB,UACI,SAAC,IAAD,CAAaS,KAAK,aAAaT,UAAU,wBAE7C,iBAAKA,UAAU,cAAf,WACI,eAAIA,UAAU,gBAAd,oBACA,SAAC,KAAD,CAAMG,GAAG,IAAIH,UAAU,+BAAvB,uCAOZ,SAACwD,EAAA,EAAD,CAAKsB,GAAI,EAAT,UACI,iBAAK9E,UAAU,sCAAf,WACI,iBAAMA,UAAU,+FAAhB,UACI,SAAC,IAAD,CAAaS,KAAK,UAAUT,UAAU,sBAE1C,iBAAKA,UAAU,cAAf,WACI,eAAIA,UAAU,gBAAd,sBACA,SAAC,KAAD,CAAMG,GAAG,IAAIH,UAAU,+BAAvB,gDCxHhC,EAzBgB,WACZ,OACI,iCACI,iBAAKA,UAAU,wBAAf,WACI,SAAC,KAAD,CACIuF,YAAU,EACVC,YAAU,EACVC,SAAS,yBACTC,YAAY,kCAGhB,SAAC,EAAD,QAIJ,SAAC,EAAD,KAGA,SAAC,KAAD,KAEA,SAAC5F,EAAA,EAAD","sources":["components/BackToTop.tsx","components/form/VerticalForm.tsx","components/form/FormInput.tsx","pages/other/Contact/Hero.tsx","pages/other/Contact/ContactUs.tsx","pages/other/Contact/index.tsx"],"sourcesContent":["import { Link } from 'react-router-dom';\r\nimport FeatherIcon from 'feather-icons-react';\r\nimport classNames from 'classnames';\r\n\r\ntype BackToTopProps = {\r\n    variant: string;\r\n};\r\n\r\nconst BackToTop = ({ variant }: BackToTopProps) => {\r\n    return (\r\n        <Link\r\n            className={classNames('btn', 'btn-soft-' + variant, 'shadow-none', 'btn-icon', 'btn-back-to-top')}\r\n            id=\"btn-back-to-top\"\r\n            to=\"#\"\r\n            onClick={() => window.scrollTo({ top: 0, behavior: 'smooth' })}\r\n        >\r\n            <FeatherIcon icon=\"arrow-up\" className=\"icon-xxs\" />\r\n        </Link>\r\n    );\r\n};\r\n\r\nBackToTop.defaultProps = {\r\n    variant: 'primary',\r\n};\r\n\r\nexport default BackToTop;\r\n","import React from 'react';\r\nimport { useForm, Resolver, SubmitHandler, DefaultValues } from 'react-hook-form';\r\n\r\ntype VerticalFromProps<TFormValues> = {\r\n    defaultValues?: DefaultValues<TFormValues>;\r\n    resolver?: Resolver<TFormValues>;\r\n    children?: React.ReactNode;\r\n    onSubmit: SubmitHandler<TFormValues>;\r\n    formClass?: string;\r\n};\r\n\r\nconst VerticalForm = <TFormValues extends Record<string, any> = Record<string, any>>({\r\n    defaultValues,\r\n    resolver,\r\n    children,\r\n    onSubmit,\r\n    formClass,\r\n}: VerticalFromProps<TFormValues>) => {\r\n    /*\r\n     * form methods\r\n     */\r\n    const methods = useForm<TFormValues>({ defaultValues, resolver });\r\n    const {\r\n        handleSubmit,\r\n        register,\r\n        control,\r\n        formState: { errors },\r\n    } = methods;\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit(onSubmit)} className={formClass} noValidate>\r\n            {Array.isArray(children)\r\n                ? children.map((child) => {\r\n                      return child.props && child.props.name\r\n                          ? React.createElement(child.type, {\r\n                                ...{\r\n                                    ...child.props,\r\n                                    register,\r\n                                    key: child.props.name,\r\n                                    errors,\r\n                                    control,\r\n                                },\r\n                            })\r\n                          : child;\r\n                  })\r\n                : children}\r\n        </form>\r\n    );\r\n};\r\n\r\nexport default VerticalForm;\r\n","import React, { InputHTMLAttributes } from 'react';\r\nimport { Form, InputGroup } from 'react-bootstrap';\r\n\r\nimport { FieldErrors, Control } from 'react-hook-form';\r\n\r\ninterface FormInputProps extends InputHTMLAttributes<HTMLInputElement> {\r\n    startIcon?: React.ReactNode;\r\n    label?: string;\r\n    type?: string;\r\n    name: string;\r\n    comp?: string;\r\n    placeholder?: string;\r\n    register?: any;\r\n    errors?: FieldErrors;\r\n    control?: Control<any>;\r\n    className?: string;\r\n    labelClassName?: string;\r\n    containerClass?: string;\r\n    textClassName?: string;\r\n    refCallback?: any;\r\n    action?: React.ReactNode;\r\n    rows?: string | number;\r\n}\r\n\r\n// textual form-controls—like inputs, passwords, textareas etc.\r\nconst TextualInput = ({\r\n    type,\r\n    name,\r\n    placeholder,\r\n    register,\r\n    errors,\r\n    comp,\r\n    rows,\r\n    className,\r\n    refCallback,\r\n    ...otherProps\r\n}: FormInputProps) => {\r\n    return (\r\n        <>\r\n            <Form.Control\r\n                type={type}\r\n                placeholder={placeholder}\r\n                name={name}\r\n                as={comp}\r\n                id={name}\r\n                ref={(r: HTMLInputElement) => {\r\n                    if (refCallback) refCallback(r);\r\n                }}\r\n                className={className}\r\n                isInvalid={errors && errors[name] ? true : false}\r\n                {...(register ? register(name) : {})}\r\n                rows={rows}\r\n                {...otherProps}\r\n            ></Form.Control>\r\n\r\n            {errors && errors[name] && (\r\n                <Form.Control.Feedback type=\"invalid\" className=\"d-block\">\r\n                    {errors[name]['message']}\r\n                </Form.Control.Feedback>\r\n            )}\r\n        </>\r\n    );\r\n};\r\n\r\n// non-textual checkbox and radio controls\r\nconst CheckInput = ({\r\n    type,\r\n    label,\r\n    name,\r\n    placeholder,\r\n    register,\r\n    errors,\r\n    comp,\r\n    rows,\r\n    className,\r\n    refCallback,\r\n    ...otherProps\r\n}: FormInputProps) => {\r\n    return (\r\n        <>\r\n            <Form.Check\r\n                type={type}\r\n                label={label}\r\n                name={name}\r\n                id={name}\r\n                ref={(r: HTMLInputElement) => {\r\n                    if (refCallback) refCallback(r);\r\n                }}\r\n                className={className}\r\n                isInvalid={errors && errors[name] ? true : false}\r\n                {...(register ? register(name) : {})}\r\n                {...otherProps}\r\n            />\r\n\r\n            {errors && errors[name] && (\r\n                <Form.Control.Feedback type=\"invalid\">{errors[name]['message']}</Form.Control.Feedback>\r\n            )}\r\n        </>\r\n    );\r\n};\r\n\r\n// handle select controls\r\nconst SelectInput = ({\r\n    type,\r\n    label,\r\n    name,\r\n    placeholder,\r\n    register,\r\n    errors,\r\n    comp,\r\n    rows,\r\n    className,\r\n    refCallback,\r\n    ...otherProps\r\n}: FormInputProps) => {\r\n    return (\r\n        <>\r\n            <Form.Select\r\n                type={type}\r\n                label={label}\r\n                name={name}\r\n                id={name}\r\n                ref={(r: HTMLInputElement) => {\r\n                    if (refCallback) refCallback(r);\r\n                }}\r\n                className={className}\r\n                isInvalid={errors && errors[name] ? true : false}\r\n                {...(register ? register(name) : {})}\r\n                {...otherProps}\r\n            />\r\n\r\n            {errors && errors[name] && (\r\n                <Form.Control.Feedback type=\"invalid\">{errors[name]['message']}</Form.Control.Feedback>\r\n            )}\r\n        </>\r\n    );\r\n};\r\n\r\n// extend textual form-controls with add-ons\r\nconst FormInputGroup = ({\r\n    startIcon,\r\n    type,\r\n    name,\r\n    placeholder,\r\n    comp,\r\n    register,\r\n    errors,\r\n    rows,\r\n    className,\r\n    textClassName,\r\n    refCallback,\r\n    ...otherProps\r\n}: FormInputProps) => {\r\n    return (\r\n        <InputGroup>\r\n            <InputGroup.Text className={textClassName}>{startIcon}</InputGroup.Text>\r\n            {type === 'select' ? (\r\n                <SelectInput\r\n                    type={type}\r\n                    name={name}\r\n                    placeholder={placeholder}\r\n                    refCallback={refCallback}\r\n                    comp={comp}\r\n                    errors={errors}\r\n                    register={register}\r\n                    className={className}\r\n                    rows={rows}\r\n                    {...otherProps}\r\n                />\r\n            ) : (\r\n                <TextualInput\r\n                    type={type}\r\n                    name={name}\r\n                    placeholder={placeholder}\r\n                    refCallback={refCallback}\r\n                    comp={comp}\r\n                    errors={errors}\r\n                    register={register}\r\n                    className={className}\r\n                    rows={rows}\r\n                    {...otherProps}\r\n                />\r\n            )}\r\n        </InputGroup>\r\n    );\r\n};\r\n\r\nconst FormInput = ({\r\n    startIcon,\r\n    label,\r\n    type,\r\n    name,\r\n    placeholder,\r\n    register,\r\n    errors,\r\n    control,\r\n    className,\r\n    labelClassName,\r\n    containerClass,\r\n    textClassName,\r\n    refCallback,\r\n    action,\r\n    rows,\r\n    ...otherProps\r\n}: FormInputProps) => {\r\n    // handle input type\r\n    const comp = type === 'textarea' ? 'textarea' : type === 'select' ? 'select' : 'input';\r\n\r\n    return (\r\n        <>\r\n            {type === 'hidden' ? (\r\n                <input type={type} name={name} {...(register ? register(name) : {})} {...otherProps} />\r\n            ) : (\r\n                <>\r\n                    {type === 'checkbox' || type === 'radio' ? (\r\n                        <Form.Group className={containerClass}>\r\n                            <CheckInput\r\n                                type={type}\r\n                                label={label}\r\n                                name={name}\r\n                                placeholder={placeholder}\r\n                                refCallback={refCallback}\r\n                                errors={errors}\r\n                                register={register}\r\n                                comp={comp}\r\n                                className={className}\r\n                                rows={rows}\r\n                                {...otherProps}\r\n                            />\r\n                        </Form.Group>\r\n                    ) : type === 'select' ? (\r\n                        <Form.Group className={containerClass}>\r\n                            {label && (\r\n                                <>\r\n                                    <Form.Label className={labelClassName}>{label}</Form.Label>\r\n                                    {action && action}\r\n                                </>\r\n                            )}\r\n                            {startIcon ? (\r\n                                <FormInputGroup\r\n                                    type={type}\r\n                                    startIcon={startIcon}\r\n                                    name={name}\r\n                                    comp={comp}\r\n                                    textClassName={textClassName}\r\n                                    placeholder={placeholder}\r\n                                    refCallback={refCallback}\r\n                                    errors={errors}\r\n                                    register={register}\r\n                                    className={className}\r\n                                    rows={rows}\r\n                                    {...otherProps}\r\n                                />\r\n                            ) : (\r\n                                <SelectInput\r\n                                    type={type}\r\n                                    name={name}\r\n                                    placeholder={placeholder}\r\n                                    refCallback={refCallback}\r\n                                    errors={errors}\r\n                                    register={register}\r\n                                    comp={comp}\r\n                                    className={className}\r\n                                    rows={rows}\r\n                                    {...otherProps}\r\n                                />\r\n                            )}\r\n                        </Form.Group>\r\n                    ) : (\r\n                        <Form.Group className={containerClass}>\r\n                            {label && (\r\n                                <>\r\n                                    <Form.Label className={labelClassName}>{label}</Form.Label>\r\n                                    {action && action}\r\n                                </>\r\n                            )}\r\n                            {startIcon ? (\r\n                                <FormInputGroup\r\n                                    type={type}\r\n                                    startIcon={startIcon}\r\n                                    name={name}\r\n                                    comp={comp}\r\n                                    textClassName={textClassName}\r\n                                    placeholder={placeholder}\r\n                                    refCallback={refCallback}\r\n                                    errors={errors}\r\n                                    register={register}\r\n                                    className={className}\r\n                                    rows={rows}\r\n                                    {...otherProps}\r\n                                />\r\n                            ) : (\r\n                                <TextualInput\r\n                                    type={type}\r\n                                    name={name}\r\n                                    placeholder={placeholder}\r\n                                    refCallback={refCallback}\r\n                                    errors={errors}\r\n                                    register={register}\r\n                                    comp={comp}\r\n                                    className={className}\r\n                                    rows={rows}\r\n                                    {...otherProps}\r\n                                />\r\n                            )}\r\n                        </Form.Group>\r\n                    )}\r\n                </>\r\n            )}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default FormInput;\r\n","import { Col, Container, Row } from 'react-bootstrap';\r\n\r\nconst Hero = () => {\r\n    return (\r\n        <section className=\"hero-4 pt-lg-6 pb-sm-9 pb-6 pt-9\">\r\n            <Container>\r\n                <Row className=\"justify-content-center\">\r\n                    <Col lg={7} className=\"text-center\">\r\n                        <h1 className=\"hero-title mb-0\">Contact Us</h1>\r\n                        <p className=\"mb-4 fs-17 text-muted\">\r\n                            Please fill out the following form and we will get back to you shortly\r\n                        </p>\r\n                    </Col>\r\n                </Row>\r\n            </Container>\r\n            <div className=\"shape bottom\">\r\n                <svg\r\n                    width=\"1440px\"\r\n                    height=\"40px\"\r\n                    viewBox=\"0 0 1440 40\"\r\n                    version=\"1.1\"\r\n                    xmlns=\"http://www.w3.org/2000/svg\"\r\n                >\r\n                    <g id=\"shape-b\" stroke=\"none\" strokeWidth=\"1\" fill=\"none\" fillRule=\"evenodd\">\r\n                        <g id=\"curve\" fill=\"#fff\">\r\n                            <path\r\n                                d=\"M0,30.013 C239.659,10.004 479.143,0 718.453,0 C957.763,0 1198.28,10.004 1440,30.013 L1440,40 L0,40 L0,30.013 Z\"\r\n                                id=\"Path\"\r\n                            ></path>\r\n                        </g>\r\n                    </g>\r\n                </svg>\r\n            </div>\r\n        </section>\r\n    );\r\n};\r\n\r\nexport default Hero;\r\n","import { Button, Card, Col, Container, Row } from 'react-bootstrap';\r\nimport { Link } from 'react-router-dom';\r\nimport GoogleMapReact from 'google-map-react';\r\nimport { useForm } from 'react-hook-form';\r\nimport * as yup from 'yup';\r\nimport { yupResolver } from '@hookform/resolvers/yup';\r\nimport FeatherIcon from 'feather-icons-react';\r\n\r\n// components\r\nimport { FormInput } from 'components/form';\r\n\r\nconst ContactUs = () => {\r\n    // form validation schema\r\n    const schemaResolver = yupResolver(\r\n        yup.object().shape({\r\n            fname: yup.string().required('Please enter first name'),\r\n            lname: yup.string().required('Please enter last name'),\r\n            email: yup.string().required('Please enter Email').email('Please enter valid Email'),\r\n            message: yup.string().required('Please enter Message'),\r\n        })\r\n    );\r\n\r\n    // form method\r\n    const methods = useForm({ resolver: schemaResolver });\r\n    const {\r\n        handleSubmit,\r\n        register,\r\n        control,\r\n        formState: { errors },\r\n    } = methods;\r\n\r\n    // handle form submission\r\n    const onSubmit = () => { };\r\n\r\n    return (\r\n        <section className=\"section pb-lg-7 py-4 position-relative\">\r\n            <Container>\r\n                <Row className=\"align-items-center\">\r\n                    <Col lg={6}>\r\n                        <Card className=\"shadow-none\">\r\n                            <Card.Body className=\"p-xl-5 p-0\">\r\n                                <h2 className=\"mb-2 mt-0 fw-medium\">Let's Talk Further</h2>\r\n                                <p className=\"mb-5\">\r\n                                    Please fill out the following form and we will get back to you shortly\r\n                                </p>\r\n\r\n                                <form onSubmit={handleSubmit(onSubmit)}>\r\n                                    <Row>\r\n                                        <Col md={6}>\r\n                                            <FormInput\r\n                                                type=\"text\"\r\n                                                name=\"fname\"\r\n                                                label=\"First Name\"\r\n                                                placeholder=\"Your First Name\"\r\n                                                containerClass={'mb-3'}\r\n                                                register={register}\r\n                                                errors={errors}\r\n                                                control={control}\r\n                                            />\r\n                                        </Col>\r\n                                        <Col md={6}>\r\n                                            <FormInput\r\n                                                type=\"text\"\r\n                                                name=\"lname\"\r\n                                                label=\"Last Name\"\r\n                                                placeholder=\"Your Last Name\"\r\n                                                containerClass={'mb-3'}\r\n                                                register={register}\r\n                                                errors={errors}\r\n                                                control={control}\r\n                                            />\r\n                                        </Col>\r\n                                        <Col lg={12}>\r\n                                            <FormInput\r\n                                                type=\"email\"\r\n                                                name=\"email\"\r\n                                                label=\"Email Name\"\r\n                                                placeholder=\"Your Email\"\r\n                                                containerClass={'mb-3'}\r\n                                                register={register}\r\n                                                errors={errors}\r\n                                                control={control}\r\n                                            />\r\n                                        </Col>\r\n                                        <Col lg={12}>\r\n                                            <FormInput\r\n                                                type=\"textarea\"\r\n                                                name=\"message\"\r\n                                                label=\"Message\"\r\n                                                placeholder=\"Type Your message...\"\r\n                                                rows={5}\r\n                                                containerClass={'mb-3'}\r\n                                                register={register}\r\n                                                errors={errors}\r\n                                                control={control}\r\n                                            />\r\n                                        </Col>\r\n                                        <Col lg=\"auto\" className=\"mb-0\">\r\n                                            <Button type=\"submit\">\r\n                                                Send\r\n                                                <span className=\"icon icon-xs text-white ms-1\">\r\n                                                    <FeatherIcon icon=\"send\" />\r\n                                                </span>\r\n                                            </Button>\r\n                                        </Col>\r\n                                    </Row>\r\n                                </form>\r\n                            </Card.Body>\r\n                        </Card>\r\n                    </Col>\r\n\r\n                    <Col lg={{ offset: 1, span: 5 }}>\r\n                        <div style={{ height: '520px' }}>\r\n                            <GoogleMapReact defaultZoom={12} defaultCenter={{ lat: 40.749179, lng: -73.989276 }} />\r\n                        </div>\r\n                    </Col>\r\n                </Row>\r\n                <Row className=\"mt-5 align-items-center\">\r\n                    <Col md={4}>\r\n                        <div className=\"d-flex px-md-1 px-lg-5 mb-md-0 mb-3\">\r\n                            <span className=\"bg-soft-primary avatar avatar-sm rounded icon icon-with-bg icon-xs text-primary me-3 flex-shrink-0\">\r\n                                <FeatherIcon icon=\"mail\" className=\"icon-dual-primary\" />\r\n                            </span>\r\n                            <div className=\"flex-grow-1\">\r\n                                <h5 className=\"m-0 fw-medium\">Email</h5>\r\n                                <Link to=\"#\" className=\"text-muted fw-normal h5 my-1\">\r\n                                    youremail@gmail.com\r\n                                </Link>\r\n                            </div>\r\n                        </div>\r\n                    </Col>\r\n\r\n                    <Col md={4}>\r\n                        <div className=\"d-flex px-md-1 px-lg-5 mb-md-0 mb-3\">\r\n                            <span className=\"bg-soft-orange avatar avatar-sm rounded icon icon-with-bg icon-xs text-orange me-3 flex-shrink-0\">\r\n                                <FeatherIcon icon=\"phone-call\" className=\"icon-dual-orange\" />\r\n                            </span>\r\n                            <div className=\"flex-grow-1\">\r\n                                <h5 className=\"m-0 fw-medium\">Phone</h5>\r\n                                <Link to=\"#\" className=\"text-muted fw-normal h5 my-1\">\r\n                                    +00 123 456 7890\r\n                                </Link>\r\n                            </div>\r\n                        </div>\r\n                    </Col>\r\n\r\n                    <Col md={4}>\r\n                        <div className=\"d-flex px-md-1 px-lg-5 mb-md-0 mb-3\">\r\n                            <span className=\"bg-soft-info avatar avatar-sm rounded icon icon-with-bg icon-xs text-info me-3 flex-shrink-0\">\r\n                                <FeatherIcon icon=\"map-pin\" className=\"icon-dual-info\" />\r\n                            </span>\r\n                            <div className=\"flex-grow-1\">\r\n                                <h5 className=\"m-0 fw-medium\">Address</h5>\r\n                                <Link to=\"#\" className=\"text-muted fw-normal h5 my-1\">\r\n                                    565 Brrom Str, NY\r\n                                </Link>\r\n                            </div>\r\n                        </div>\r\n                    </Col>\r\n                </Row>\r\n            </Container>\r\n        </section>\r\n    );\r\n};\r\n\r\nexport default ContactUs;\r\n","// components\r\nimport { Navbar1 } from 'components/navbars';\r\nimport BackToTop from 'components/BackToTop';\r\nimport { Footer2 } from 'components/footer';\r\n\r\nimport Hero from './Hero';\r\nimport ContactUs from './ContactUs';\r\n\r\nconst Contact = () => {\r\n    return (\r\n        <>\r\n            <div className=\"header-7 bg-gradient2\">\r\n                <Navbar1\r\n                    hideSearch\r\n                    fixedWidth\r\n                    navClass=\"navbar-light zindex-10\"\r\n                    buttonClass=\"btn-outline-secondary btn-sm\"\r\n                />\r\n\r\n                <Hero />\r\n            </div>\r\n\r\n            {/* contact us */}\r\n            <ContactUs />\r\n\r\n            {/* footer */}\r\n            <Footer2 />\r\n\r\n            <BackToTop />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Contact;\r\n"],"names":["BackToTop","variant","className","classNames","id","to","onClick","window","scrollTo","top","behavior","icon","defaultProps","defaultValues","resolver","children","onSubmit","formClass","methods","useForm","handleSubmit","register","control","errors","formState","noValidate","Array","isArray","map","child","props","name","React","type","key","TextualInput","placeholder","comp","rows","refCallback","otherProps","Form","as","ref","r","isInvalid","CheckInput","label","SelectInput","FormInputGroup","startIcon","textClassName","InputGroup","labelClassName","containerClass","action","Container","Row","Col","lg","width","height","viewBox","version","xmlns","stroke","strokeWidth","fill","fillRule","d","schemaResolver","yupResolver","yup","shape","fname","required","lname","email","message","Card","md","Button","offset","span","style","defaultZoom","defaultCenter","lat","lng","hideSearch","fixedWidth","navClass","buttonClass"],"sourceRoot":""}