{"version":3,"file":"static/js/9338.f5097521.chunk.js","mappings":"wLA4EA,UAvEqB,WACjB,OACI,SAAC,IAAD,WACI,SAAC,IAAD,CAAKA,GAAI,GAAIC,GAAI,EAAjB,UACI,SAAC,IAAD,WACI,SAAC,IAAD,CAAKC,GAAI,GAAT,UACI,SAAC,IAAD,WACI,UAAC,SAAD,YACI,SAAC,UAAD,CAAYC,GAAG,KAAf,4BACA,qRAKA,wCACiB,KACb,6BACI,2CACM,IAJd,kCAQA,iBAAKC,UAAU,OAAf,WACI,yBACI,cACIC,KAAK,yDACLC,OAAO,SACPC,IAAI,aAHR,2BASJ,yIAIA,wBACI,2FAC+D,kBAD/D,6BAMJ,wBACI,yDAEJ,wBACI,iHAE2C,kBAF3C,gCAQR,gBAAKH,UAAU,OAAf,UACI,SAAC,IAAD,CAAOI,QAAQ,GAAGJ,UAAU,kBAA5B,wH,wRClD9BK,GAAgBC,EAAAA,EAAAA,GAAiB,MACvCD,EAAcE,YAAc,gBAC5B,IAAMC,GAAeC,EAAAA,EAAAA,GAAmB,gBAAiB,CACvDC,UAAWL,IAEPM,GAAYF,EAAAA,EAAAA,GAAmB,aAAc,CACjDC,UAAWE,EAAAA,IAEPC,EAAe,CACnBT,QAAS,UACTU,MAAM,EACNC,WAAYC,EAAAA,EACZC,WAAY,eAERC,EAAqBC,EAAAA,YAAiB,SAACC,EAAmBC,GAC9D,OAYIC,EAAAA,EAAAA,IAAgBF,EAAmB,CACrCN,KAAM,YAZNS,EADF,EACEA,SACAT,EAFF,EAEEA,KACAG,EAHF,EAGEA,WACAO,EAJF,EAIEA,aACAxB,EALF,EAKEA,UACAyB,EANF,EAMEA,SACArB,EAPF,EAOEA,QACAsB,EARF,EAQEA,QACAC,EATF,EASEA,YACAZ,EAVF,EAUEA,WACGa,GAXL,YAeMC,GAASC,EAAAA,EAAAA,IAAmBP,EAAU,SACtCQ,GAAcC,EAAAA,EAAAA,IAAiB,SAAAC,GAC/BP,GACFA,GAAQ,EAAOO,MAGbC,GAA4B,IAAfnB,EAAsBC,EAAAA,EAAOD,EAE1CoB,GAAqBC,EAAAA,EAAAA,MAAM,OAAD,QAAC,QAC/BC,KAAM,SACDH,OAAqBI,EAARV,GAFY,IAG9BP,IAAKA,EACLrB,UAAWuC,GAAAA,CAAWvC,EAAW6B,EAAQzB,GAAW,GAAJ,OAAOyB,EAAP,YAAiBzB,GAAWuB,GAAe,GAAJ,OAAOE,EAAP,iBACvFJ,SAAU,CAACE,IAA4Ba,EAAAA,EAAAA,KAAKC,EAAAA,EAAa,CACvDC,QAASX,EACT,aAAcd,EACdb,QAASoB,IACPC,MAGN,OAAKS,GACeM,EAAAA,EAAAA,KAAKN,GAAD,QAAC,QACvBS,eAAe,GACZf,GAFmB,IAGtBP,SAAKiB,EACLM,GAAI9B,EACJW,SAAUU,KANYrB,EAAOqB,EAAQ,QASzCjB,EAAMX,YAAc,QACpBW,EAAML,aAAeA,EACrB,IAAegC,OAAOC,OAAO5B,EAAO,CAClC6B,KAAMpC,EACNqC,QAASxC","sources":["pages/docs/CodeSpliting.tsx","../node_modules/react-bootstrap/esm/Alert.js"],"sourcesContent":["import { Alert, Card, Col, Row } from 'react-bootstrap';\r\n\r\n// component\r\nimport DocsLayout from './layout';\r\n\r\nconst CodeSpliting = () => {\r\n    return (\r\n        <DocsLayout>\r\n            <Col xl={10} lg={9}>\r\n                <Row>\r\n                    <Col xs={12}>\r\n                        <Card>\r\n                            <Card.Body>\r\n                                <Card.Title as=\"h4\">Code Spliting</Card.Title>\r\n                                <p>\r\n                                    Code-splitting is the process of taking one large bundle containing your entire app,\r\n                                    and splitting them up into multiple smaller bundles which contain separate parts of\r\n                                    your app. You can think of code splitting as incrementally downloading the app.\r\n                                </p>\r\n                                <p>\r\n                                    We are using{' '}\r\n                                    <strong>\r\n                                        <code>React.lazy</code>\r\n                                    </strong>{' '}\r\n                                    in order to split the code.\r\n                                </p>\r\n\r\n                                <div className=\"mt-1\">\r\n                                    <h4>\r\n                                        <a\r\n                                            href=\"https://reactjs.org/docs/code-splitting.html#reactlazy\"\r\n                                            target=\"_blank\"\r\n                                            rel=\"noreferrer\"\r\n                                        >\r\n                                            React.lazy\r\n                                        </a>\r\n                                    </h4>\r\n\r\n                                    <p>\r\n                                        The React.lazy function lets you render a dynamic import as a regular component.\r\n                                        E.g. Before code splitting:\r\n                                    </p>\r\n                                    <p>\r\n                                        <code>\r\n                                            import DefaultDashboard from './views/dashboards/Default'; <br />\r\n                                            &lt;DefaultDashboard /&gt;\r\n                                        </code>\r\n                                    </p>\r\n\r\n                                    <p>\r\n                                        <strong>After code splitting:</strong>\r\n                                    </p>\r\n                                    <p>\r\n                                        <code>\r\n                                            const DefaultDashboard = React.lazy(() =&gt;\r\n                                            import('./views/dashboards/Default')); <br />\r\n                                            &lt;DefaultDashboard /&gt;\r\n                                        </code>\r\n                                    </p>\r\n                                </div>\r\n\r\n                                <div className=\"mt-1\">\r\n                                    <Alert variant=\"\" className=\"bg-soft-primary\">\r\n                                        Note that, currently all the views (pages) components are loaded lazily using\r\n                                        React.lazy.\r\n                                    </Alert>\r\n                                </div>\r\n                            </Card.Body>\r\n                        </Card>\r\n                    </Col>\r\n                </Row>\r\n            </Col>\r\n        </DocsLayout>\r\n    );\r\n};\r\n\r\nexport default CodeSpliting;\r\n","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useUncontrolled } from 'uncontrollable';\nimport useEventCallback from '@restart/hooks/useEventCallback';\nimport Anchor from '@restart/ui/Anchor';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport Fade from './Fade';\nimport CloseButton from './CloseButton';\nimport divWithClassName from './divWithClassName';\nimport createWithBsPrefix from './createWithBsPrefix';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nconst DivStyledAsH4 = divWithClassName('h4');\nDivStyledAsH4.displayName = 'DivStyledAsH4';\nconst AlertHeading = createWithBsPrefix('alert-heading', {\n  Component: DivStyledAsH4\n});\nconst AlertLink = createWithBsPrefix('alert-link', {\n  Component: Anchor\n});\nconst defaultProps = {\n  variant: 'primary',\n  show: true,\n  transition: Fade,\n  closeLabel: 'Close alert'\n};\nconst Alert = /*#__PURE__*/React.forwardRef((uncontrolledProps, ref) => {\n  const {\n    bsPrefix,\n    show,\n    closeLabel,\n    closeVariant,\n    className,\n    children,\n    variant,\n    onClose,\n    dismissible,\n    transition,\n    ...props\n  } = useUncontrolled(uncontrolledProps, {\n    show: 'onClose'\n  });\n  const prefix = useBootstrapPrefix(bsPrefix, 'alert');\n  const handleClose = useEventCallback(e => {\n    if (onClose) {\n      onClose(false, e);\n    }\n  });\n  const Transition = transition === true ? Fade : transition;\n\n  const alert = /*#__PURE__*/_jsxs(\"div\", {\n    role: \"alert\",\n    ...(!Transition ? props : undefined),\n    ref: ref,\n    className: classNames(className, prefix, variant && `${prefix}-${variant}`, dismissible && `${prefix}-dismissible`),\n    children: [dismissible && /*#__PURE__*/_jsx(CloseButton, {\n      onClick: handleClose,\n      \"aria-label\": closeLabel,\n      variant: closeVariant\n    }), children]\n  });\n\n  if (!Transition) return show ? alert : null;\n  return /*#__PURE__*/_jsx(Transition, {\n    unmountOnExit: true,\n    ...props,\n    ref: undefined,\n    in: show,\n    children: alert\n  });\n});\nAlert.displayName = 'Alert';\nAlert.defaultProps = defaultProps;\nexport default Object.assign(Alert, {\n  Link: AlertLink,\n  Heading: AlertHeading\n});"],"names":["xl","lg","xs","as","className","href","target","rel","variant","DivStyledAsH4","divWithClassName","displayName","AlertHeading","createWithBsPrefix","Component","AlertLink","Anchor","defaultProps","show","transition","Fade","closeLabel","Alert","React","uncontrolledProps","ref","useUncontrolled","bsPrefix","closeVariant","children","onClose","dismissible","props","prefix","useBootstrapPrefix","handleClose","useEventCallback","e","Transition","alert","_jsxs","role","undefined","classNames","_jsx","CloseButton","onClick","unmountOnExit","in","Object","assign","Link","Heading"],"sourceRoot":""}