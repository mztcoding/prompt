{"version":3,"file":"static/js/3822.b61a9eb5.chunk.js","mappings":"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","sources":["pages/docs/Bootstrap/Alerts.tsx","pages/docs/Bootstrap/Accordions.tsx","pages/docs/Bootstrap/Badges.tsx","pages/docs/Bootstrap/Breadcrumb.tsx","pages/docs/Bootstrap/Buttons.tsx","pages/docs/Bootstrap/Card.tsx","pages/docs/Bootstrap/Carousel.tsx","pages/docs/Bootstrap/Dropdown.tsx","pages/docs/Bootstrap/FormsElement.tsx","pages/docs/Bootstrap/Tabs.tsx","pages/docs/Bootstrap/Modals.tsx","pages/docs/Bootstrap/Progressbars.tsx","pages/docs/Bootstrap/Pagination.tsx","pages/docs/Bootstrap/Spinners.tsx","pages/docs/Bootstrap/Offcanvas.tsx","pages/docs/Bootstrap/Popovers.tsx","pages/docs/Bootstrap/Tooltips.tsx","pages/docs/Bootstrap/data.ts","pages/docs/Bootstrap/index.tsx"],"sourcesContent":["import { useState } from 'react';\r\nimport { Alert, Card, Col, Row } from 'react-bootstrap';\r\nimport classNames from 'classnames';\r\n\r\nimport { Variant } from '../types';\r\n\r\nconst OutlineAlerts = () => {\r\n    const [alertVariants, setAlertVariants] = useState<Variant[]>([\r\n        'primary',\r\n        'secondary',\r\n        'success',\r\n        'danger',\r\n        'warning',\r\n        'info',\r\n    ]);\r\n\r\n    const handleClose = (index: number) => {\r\n        const list = [...alertVariants];\r\n        list.splice(index, 1);\r\n        setAlertVariants(list);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            {(alertVariants || []).map((color, index) => {\r\n                return (\r\n                    <Alert\r\n                        variant={color}\r\n                        key={index.toString()}\r\n                        onClose={() => handleClose(index)}\r\n                        dismissible\r\n                        className={classNames('bg-white', 'border', 'text-' + color, {\r\n                            'mb-xxl-0': index === alertVariants.length - 1,\r\n                        })}\r\n                    >\r\n                        <span className={classNames('badge', 'badge-soft-' + color, 'align-items-center', 'me-3')}>\r\n                            {color}\r\n                        </span>\r\n                        A simple {color} alert—check it out!\r\n                    </Alert>\r\n                );\r\n            })}\r\n        </>\r\n    );\r\n};\r\n\r\nconst DefaultAlerts = () => {\r\n    const [alertVariants, setAlertVariants] = useState<Variant[]>(['danger', 'warning', 'info']);\r\n\r\n    const handleClose = (index: number) => {\r\n        const list = [...alertVariants];\r\n        list.splice(index, 1);\r\n        setAlertVariants(list);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            {['primary', 'secondary', 'success'].map((color, index) => {\r\n                return (\r\n                    <Alert variant={color} key={index.toString()}>\r\n                        A simple {color} alert—check it out!\r\n                    </Alert>\r\n                );\r\n            })}\r\n\r\n            {(alertVariants || []).map((color, index) => {\r\n                return (\r\n                    <Alert\r\n                        variant={color}\r\n                        key={index.toString()}\r\n                        onClose={() => handleClose(index)}\r\n                        dismissible\r\n                        className={classNames({ 'mb-0': index === alertVariants.length - 1 })}\r\n                    >\r\n                        A simple {color} alert—check it out!\r\n                    </Alert>\r\n                );\r\n            })}\r\n        </>\r\n    );\r\n};\r\n\r\nconst Alerts = () => {\r\n    return (\r\n        <Card id=\"alerts\">\r\n            <Card.Body>\r\n                <Card.Title as=\"h5\" className=\"mb-0\">\r\n                    Alerts\r\n                </Card.Title>\r\n                <p className=\"sub-header\">\r\n                    Provide contextual feedback messages for typical user actions with the handful of available and\r\n                    flexible alert messages.\r\n                </p>\r\n\r\n                <Row>\r\n                    <Col xxl={6}>\r\n                        <OutlineAlerts />\r\n                    </Col>\r\n                    <Col xxl={6}>\r\n                        <DefaultAlerts />\r\n                    </Col>\r\n                </Row>\r\n            </Card.Body>\r\n        </Card>\r\n    );\r\n};\r\n\r\nexport default Alerts;\r\n","import { useContext } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Accordion, AccordionContext, Card, useAccordionButton } from 'react-bootstrap';\r\nimport FeatherIcon from 'feather-icons-react';\r\nimport classNames from 'classnames';\r\n\r\ntype ContentType = {\r\n    id: number;\r\n    title: string;\r\n    text: string;\r\n};\r\n\r\ntype CustomToggleProps = {\r\n    children: React.ReactNode;\r\n    eventKey: string;\r\n    containerClass: string;\r\n    linkClass: string;\r\n    callback?: (eventKey: string) => void;\r\n};\r\n\r\nconst CustomToggle = ({ children, eventKey, containerClass, linkClass, callback }: CustomToggleProps) => {\r\n    const { activeEventKey } = useContext(AccordionContext);\r\n\r\n    const decoratedOnClick = useAccordionButton(eventKey, () => callback && callback(eventKey));\r\n\r\n    const isCurrentEventKey = activeEventKey === eventKey;\r\n\r\n    return (\r\n        <Link\r\n            to=\"#\"\r\n            className={classNames(linkClass, {\r\n                collapsed: !isCurrentEventKey,\r\n            })}\r\n            onClick={decoratedOnClick}\r\n        >\r\n            <Card.Header>\r\n                <h5 className={containerClass}>\r\n                    {children} <FeatherIcon icon=\"chevron-down\" className=\"icon-xs accordion-arrow\" />\r\n                </h5>\r\n            </Card.Header>\r\n        </Link>\r\n    );\r\n};\r\n\r\nconst CustomAccordion = ({ item, index, length }: { item: ContentType; index: number; length: number }) => {\r\n    return (\r\n        <Card className={classNames('shadow-none', 'border', index + 1 === length ? 'mb-0' : 'mb-1')}>\r\n            <CustomToggle eventKey={String(index)} containerClass=\"my-1 fs-16\" linkClass=\"text-dark\">\r\n                {item.title}\r\n            </CustomToggle>\r\n            <Accordion.Collapse eventKey={String(index)}>\r\n                <Card.Body className=\"text-muted pt-1\">{item.text}</Card.Body>\r\n            </Accordion.Collapse>\r\n        </Card>\r\n    );\r\n};\r\n\r\nconst AccordionExample = () => {\r\n    const accordianContent: ContentType[] = [\r\n        {\r\n            id: 2,\r\n            title: ' What is Lorem Ipsum?',\r\n            text: `Anim pariatur cliche reprehenderit, enim eiusmod high life accusamus terry\r\n                    richardson ad squid. 3 wolf moon officia aute, non cupidatat skateboard dolor brunch.Food truck quinoa\r\n                    nesciunt laborum eiusmod.Brunch 3 wolf moon tempor, sunt aliqua\r\n                    put a bird on it squid single- origin coffee nulla assumenda\r\n                    shoreditch et.Nihil anim keffiyeh helvetica, craft beer labore\r\n                    wes anderson cred nesciunt sapiente ea proident.Ad vegan\r\n                    excepteur butcher vice lomo.Leggings occaecat craft beer\r\n                    farm - to - table, raw denim aesthetic synth nesciunt you probably\r\n                    haven't heard of them accusamus labore sustainable VHS.`,\r\n        },\r\n        {\r\n            id: 3,\r\n            title: 'Why do we use it?',\r\n            text: `Anim pariatur cliche reprehenderit, enim eiusmod high life accusamus terry\r\n                    richardson ad squid. 3 wolf moon officia aute, non cupidatat skateboard dolor brunch.Food truck quinoa\r\n                    nesciunt laborum eiusmod.Brunch 3 wolf moon tempor, sunt aliqua\r\n                    put a bird on it squid single- origin coffee nulla assumenda\r\n                    shoreditch et.Nihil anim keffiyeh helvetica, craft beer labore\r\n                    wes anderson cred nesciunt sapiente ea proident.Ad vegan\r\n                    excepteur butcher vice lomo.Leggings occaecat craft beer\r\n                    farm - to - table, raw denim aesthetic synth nesciunt you probably\r\n                    haven't heard of them accusamus labore sustainable VHS.`,\r\n        },\r\n        {\r\n            id: 4,\r\n            title: 'Where does it come from?',\r\n            text: `Anim pariatur cliche reprehenderit, enim eiusmod high life accusamus terry\r\n                    richardson ad squid. 3 wolf moon officia aute, non cupidatat skateboard dolor brunch.Food truck quinoa\r\n                    nesciunt laborum eiusmod.Brunch 3 wolf moon tempor, sunt aliqua\r\n                    put a bird on it squid single- origin coffee nulla assumenda\r\n                    shoreditch et.Nihil anim keffiyeh helvetica, craft beer labore\r\n                    wes anderson cred nesciunt sapiente ea proident.Ad vegan\r\n                    excepteur butcher vice lomo.Leggings occaecat craft beer\r\n                    farm - to - table, raw denim aesthetic synth nesciunt you probably\r\n                    haven't heard of them accusamus labore sustainable VHS.`,\r\n        },\r\n    ];\r\n\r\n    return (\r\n        <Card id=\"accordions\">\r\n            <Card.Body>\r\n                <Card.Title as=\"h5\" className=\"mb-0\">\r\n                    Accordions\r\n                </Card.Title>\r\n                <p className=\"sub-header\">\r\n                    Build vertically collapsing accordions in combination with the Collapse component.\r\n                </p>\r\n                <Accordion defaultActiveKey=\"0\" id=\"accordion\" className=\"custom-accordionwitharrow\">\r\n                    {(accordianContent || []).map((item, index) => {\r\n                        return (\r\n                            <CustomAccordion\r\n                                key={index.toString()}\r\n                                item={item}\r\n                                index={index}\r\n                                length={accordianContent.length}\r\n                            />\r\n                        );\r\n                    })}\r\n                </Accordion>\r\n            </Card.Body>\r\n        </Card>\r\n    );\r\n};\r\n\r\nexport default AccordionExample;\r\n","import { Badge, Button, Card } from 'react-bootstrap';\r\nimport classNames from 'classnames';\r\n\r\n// types\r\nimport { Variant } from '../types';\r\n\r\ntype BadgesProps = {\r\n    variants: Variant[];\r\n};\r\n\r\nconst Badges = ({ variants }: BadgesProps) => {\r\n    return (\r\n        <Card id=\"badges\">\r\n            <Card.Body>\r\n                <Card.Title as=\"h5\" className=\"mb-0\">\r\n                    Badges\r\n                </Card.Title>\r\n                <p className=\"sub-header\">\r\n                    Badges scale to match the size of the immediate parent element by using relative font sizing and{' '}\r\n                    <code>em</code> units.\r\n                </p>\r\n\r\n                <h1>\r\n                    Example heading <Badge bg=\"secondary\">New</Badge>{' '}\r\n                </h1>\r\n                <h2>\r\n                    Example heading <Badge bg=\"secondary\">New</Badge>{' '}\r\n                </h2>\r\n                <h3>\r\n                    Example heading <Badge bg=\"secondary\">New</Badge>{' '}\r\n                </h3>\r\n                <h4>\r\n                    Example heading <Badge bg=\"secondary\">New</Badge>{' '}\r\n                </h4>\r\n                <h5>\r\n                    Example heading <Badge bg=\"secondary\">New</Badge>{' '}\r\n                </h5>\r\n                <h6>\r\n                    Example heading <Badge bg=\"secondary\">New</Badge>{' '}\r\n                </h6>\r\n\r\n                <p className=\"mt-4\">Badges can be used as part of links or buttons to provide a counter.</p>\r\n\r\n                <Button className=\"btn-primary\">\r\n                    Notifications\r\n                    <Badge className=\"ms-1\" bg=\"light\" text=\"dark\">\r\n                        4\r\n                    </Badge>\r\n                </Button>\r\n\r\n                <p className=\"mt-4\">\r\n                    Add any of the below mentioned modifier classes to change the appearance of a badge.\r\n                </p>\r\n\r\n                {([...variants, 'light'] || []).map((item, index) => {\r\n                    return (\r\n                        <Badge\r\n                            key={index.toString()}\r\n                            className={classNames('me-1', item === 'light' && 'text-dark')}\r\n                            bg={item}\r\n                        >\r\n                            {item!.charAt(0).toUpperCase() + item!.slice(1)}\r\n                        </Badge>\r\n                    );\r\n                })}\r\n\r\n                <p className=\"mt-4\">\r\n                    badges Use the <code>pill</code> modifier class to make badges more rounded (with a larger\r\n                    border-radius).\r\n                </p>\r\n\r\n                <Badge bg=\"primary\" pill>\r\n                    Pill\r\n                </Badge>\r\n                <Badge bg=\"primary\" pill className=\"badge-md mx-1\">\r\n                    Badge-md\r\n                </Badge>\r\n                <Badge bg=\"primary\" pill className=\"badge-lg\">\r\n                    Badge-lg\r\n                </Badge>\r\n\r\n                <p className=\"mt-4\">\r\n                    Use the <code>.badge-soft-*</code> modifier class to make badges soft.\r\n                </p>\r\n\r\n                {(variants || []).map((item, index) => {\r\n                    return (\r\n                        <Badge key={index.toString()} className={classNames('me-1', 'badge-soft-' + item)} bg=\"\">\r\n                            {item!.charAt(0).toUpperCase() + item!.slice(1)}\r\n                        </Badge>\r\n                    );\r\n                })}\r\n            </Card.Body>\r\n        </Card>\r\n    );\r\n};\r\n\r\nexport default Badges;\r\n","import { Breadcrumb, Card } from 'react-bootstrap';\r\nimport FeatherIcon from 'feather-icons-react';\r\n\r\nconst Breadcrumbs = () => {\r\n    return (\r\n        <Card id=\"breadcrumb\">\r\n            <Card.Body>\r\n                <Card.Title as=\"h5\" className=\"mb-0\">\r\n                    Breadcrumb\r\n                </Card.Title>\r\n                <p className=\"sub-header\">\r\n                    Indicate the current page’s location within a navigational hierarchy that automatically adds\r\n                    separators via CSS. Add active prop to active <code>Breadcrumb.Item</code>\r\n                </p>\r\n\r\n                <Breadcrumb>\r\n                    <Breadcrumb.Item active>Home</Breadcrumb.Item>\r\n                </Breadcrumb>\r\n\r\n                <Breadcrumb>\r\n                    <Breadcrumb.Item href=\"#\">Home</Breadcrumb.Item>\r\n                    <Breadcrumb.Item active>Library</Breadcrumb.Item>\r\n                </Breadcrumb>\r\n\r\n                <Breadcrumb>\r\n                    <Breadcrumb.Item href=\"#\">\r\n                        <FeatherIcon icon=\"home\" className=\"icon-xs\" />\r\n                    </Breadcrumb.Item>\r\n                    <Breadcrumb.Item href=\"#\">Library</Breadcrumb.Item>\r\n                    <Breadcrumb.Item active>Data</Breadcrumb.Item>\r\n                </Breadcrumb>\r\n            </Card.Body>\r\n        </Card>\r\n    );\r\n};\r\n\r\nexport default Breadcrumbs;\r\n","import { Button, Card } from 'react-bootstrap';\r\nimport FeatherIcon from 'feather-icons-react';\r\n\r\n// types\r\nimport { Variant } from '../types';\r\n\r\ntype ButtonsProps = {\r\n    variants: Variant[];\r\n};\r\n\r\ntype ButtonVariant = Variant | 'link' | 'white';\r\n\r\nconst Buttons = ({ variants }: ButtonsProps) => {\r\n    const buttonVariants1: ButtonVariant[] = [...variants, 'link'];\r\n    const buttonVariants2: ButtonVariant[] = [...variants, 'link', 'white'];\r\n\r\n    return (\r\n        <Card id=\"buttons\">\r\n            <Card.Body>\r\n                <Card.Title as=\"h5\" className=\"mb-0\">\r\n                    Buttons\r\n                </Card.Title>\r\n                <p className=\"sub-header\">\r\n                    Use any of the available button style types to quickly create a styled button. Just modify the{' '}\r\n                    <code>variant</code> prop.\r\n                </p>\r\n\r\n                {(buttonVariants1 || []).map((item, index) => {\r\n                    return (\r\n                        <Button variant={item} className=\"me-2 mb-2 mb-xxl-0\" key={index.toString()}>\r\n                            {item!.charAt(0).toUpperCase() + item!.slice(1)}\r\n                        </Button>\r\n                    );\r\n                })}\r\n\r\n                <p className=\"sub-header mt-4\">\r\n                    For a lighter touch, Buttons also come in <code>outline-*</code> variants with no background color.\r\n                </p>\r\n\r\n                {(buttonVariants2 || []).map((item, index) => {\r\n                    return (\r\n                        <Button\r\n                            variant={item !== 'white' ? 'outline-' + item : item}\r\n                            className=\"me-2 mb-2 mb-xxl-0\"\r\n                            key={index.toString()}\r\n                        >\r\n                            {item!.charAt(0).toUpperCase() + item!.slice(1)}\r\n                        </Button>\r\n                    );\r\n                })}\r\n\r\n                <p className=\"sub-header mt-4\">\r\n                    Replace the default modifier classes with the <code>.btn-soft-*</code>\r\n                    ones to have a softer background color on any button.\r\n                </p>\r\n\r\n                {(buttonVariants1 || []).map((item, index) => {\r\n                    return (\r\n                        <Button variant={'soft-' + item} className=\"me-2 mb-2 mb-xl-0\" key={index.toString()}>\r\n                            {item!.charAt(0).toUpperCase() + item!.slice(1)}\r\n                        </Button>\r\n                    );\r\n                })}\r\n\r\n                <p className=\"sub-header mt-4\">\r\n                    Add a class <code>.btn-rounded</code> with the default modifier classes to have rounded edges.\r\n                </p>\r\n\r\n                {(buttonVariants1 || []).map((item, index) => {\r\n                    return (\r\n                        <Button variant={item} className=\"btn-rounded me-2 mb-2 mb-xl-0\" key={index.toString()}>\r\n                            {item!.charAt(0).toUpperCase() + item!.slice(1)}\r\n                        </Button>\r\n                    );\r\n                })}\r\n\r\n                <p className=\"sub-header mt-4\">\r\n                    Fancy larger or smaller buttons? Add <code>size=\"lg\"</code>, <code>size=\"sm\"</code> for additional\r\n                    sizes.\r\n                </p>\r\n\r\n                <Button variant=\"primary\" size=\"lg\" className=\"me-2 mb-2 mb-sm-0\">\r\n                    Large button\r\n                </Button>\r\n                <Button variant=\"primary\" className=\"me-2 mb-2 mb-sm-0\">\r\n                    Large button\r\n                </Button>\r\n                <Button variant=\"primary\" size=\"sm\" className=\"me-2 mb-2 mb-sm-0\">\r\n                    Large button\r\n                </Button>\r\n\r\n                <p className=\"sub-header mt-4\">Buttons with icon - variations</p>\r\n\r\n                <Button variant=\"primary\" className=\"me-2 mb-2 mb-sm-0\">\r\n                    <FeatherIcon icon=\"play\" className=\"me-1\" />\r\n                    Button with icon on left\r\n                </Button>\r\n                <Button variant=\"primary\" className=\"me-2 mb-2 mb-sm-0\">\r\n                    Button with icon on right\r\n                    <FeatherIcon icon=\"play\" className=\"ms-1\" />\r\n                </Button>\r\n                <Button variant=\"primary\" className=\"me-2 mb-2 mb-sm-0 btn-icon d-inline-flex\">\r\n                    <FeatherIcon icon=\"play\" />\r\n                </Button>\r\n                <Button variant=\"primary\" className=\"btn-rounded-circle btn-icon d-inline-flex\">\r\n                    <FeatherIcon icon=\"play\" />\r\n                </Button>\r\n            </Card.Body>\r\n        </Card>\r\n    );\r\n};\r\n\r\nexport default Buttons;\r\n","import { Link } from 'react-router-dom';\r\nimport { Button, Card, Col, Row } from 'react-bootstrap';\r\n\r\n// images\r\nimport CardImg1 from '../../../assets/images/photos/1.jpg';\r\n\r\nconst Cards = () => {\r\n    return (\r\n        <Card id=\"cards\">\r\n            <Card.Body>\r\n                <Card.Title as=\"h5\" className=\"mb-0\">\r\n                    Cards\r\n                </Card.Title>\r\n                <p className=\"sub-header\">\r\n                    Bootstrap's cards provide a flexible and extensible content container with multiple variants and\r\n                    options. Check out{' '}\r\n                    <Link\r\n                        rel=\"noreferrer\"\r\n                        to={{ pathname: 'https://react-bootstrap.netlify.app/components/cards/' }}\r\n                        target=\"_blank\"\r\n                    >\r\n                        Bootstrap's Doc\r\n                    </Link>\r\n                    for more examples.\r\n                </p>\r\n\r\n                <Row>\r\n                    <Col xl={5} xxl={4}>\r\n                        <Card className=\"border mb-xl-0\">\r\n                            <Card.Img variant=\"top\" src={CardImg1} alt=\"Card Img\" />\r\n                            <Card.Body>\r\n                                <Card.Title>Card Title</Card.Title>\r\n                                <Card.Text>\r\n                                    Some quick example text to build on the card title and make up the bulk of the\r\n                                    card's content.\r\n                                </Card.Text>\r\n                                <Button variant=\"primary\">Go somewhere</Button>\r\n                            </Card.Body>\r\n                        </Card>\r\n                    </Col>\r\n                    <Col xl={7} xxl={8}>\r\n                        <Card className=\"border\">\r\n                            <Row className=\"g-0 align-items-center\">\r\n                                <Col md={5}>\r\n                                    <Card.Img src={CardImg1} alt=\"Card Img\" />\r\n                                </Col>\r\n                                <Col md={7}>\r\n                                    <Card.Body>\r\n                                        <Card.Title>Card Title</Card.Title>\r\n                                        <Card.Text>\r\n                                            Some quick example text to build on the card title and make up the bulk of\r\n                                            the card's content.\r\n                                        </Card.Text>\r\n                                        <Button variant=\"primary\">Go somewhere</Button>\r\n                                    </Card.Body>\r\n                                </Col>\r\n                            </Row>\r\n                        </Card>\r\n                        <Card className=\"border mb-0\">\r\n                            <Row className=\"g-0 align-items-center\">\r\n                                <Col md={7}>\r\n                                    <Card.Body>\r\n                                        <Card.Title>Card Title</Card.Title>\r\n                                        <Card.Text>\r\n                                            Some quick example text to build on the card title and make up the bulk of\r\n                                            the card's content.\r\n                                        </Card.Text>\r\n                                        <Button variant=\"primary\">Go somewhere</Button>\r\n                                    </Card.Body>\r\n                                </Col>\r\n                                <Col md={5}>\r\n                                    <Card.Img src={CardImg1} alt=\"Card Img\" />\r\n                                </Col>\r\n                            </Row>\r\n                        </Card>\r\n                    </Col>\r\n                </Row>\r\n            </Card.Body>\r\n        </Card>\r\n    );\r\n};\r\n\r\nexport default Cards;\r\n","import { Card, Carousel } from 'react-bootstrap';\r\n\r\n// images\r\nimport FirstSlide from '../../../assets/images/photos/1.jpg';\r\nimport SecondSlide from '../../../assets/images/photos/2.jpg';\r\nimport ThirdSlide from '../../../assets/images/photos/3.jpg';\r\n\r\nconst DefaultCarousel = () => {\r\n    return (\r\n        <>\r\n            <p className=\"sub-header\">\r\n                A slideshow component for cycling through elements—images or slides of text—like a carousel.\r\n            </p>\r\n            <Carousel className=\"doc-carousel\">\r\n                <Carousel.Item>\r\n                    <img src={FirstSlide} alt=\"First Slide\" className=\"d-block w-100\" />\r\n                </Carousel.Item>\r\n                <Carousel.Item>\r\n                    <img src={SecondSlide} alt=\"Second Slide\" className=\"d-block w-100\" />\r\n                </Carousel.Item>\r\n                <Carousel.Item>\r\n                    <img src={ThirdSlide} alt=\"Third Slide\" className=\"d-block w-100\" />\r\n                </Carousel.Item>\r\n            </Carousel>\r\n        </>\r\n    );\r\n};\r\n\r\nconst CaptionCarousel = () => {\r\n    return (\r\n        <>\r\n            <p className=\"sub-header mt-4\">\r\n                Add captions to your slides easily with the <code>.carousel-caption</code> element within any{' '}\r\n                <code>.carousel-item</code>.\r\n            </p>\r\n            <Carousel className=\"doc-carousel\">\r\n                <Carousel.Item>\r\n                    <img src={FirstSlide} alt=\"First Slide\" className=\"d-block w-100\" />\r\n                    <Carousel.Caption>\r\n                        <h3 className=\"text-white\">First slide label</h3>\r\n                        <p>Nulla vitae elit libero, a pharetra augue mollis interdum.</p>\r\n                    </Carousel.Caption>\r\n                </Carousel.Item>\r\n                <Carousel.Item>\r\n                    <img src={SecondSlide} alt=\"Second Slide\" className=\"d-block w-100\" />\r\n                    <Carousel.Caption>\r\n                        <h3 className=\"text-white\">Second slide label</h3>\r\n                        <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit.</p>\r\n                    </Carousel.Caption>\r\n                </Carousel.Item>\r\n                <Carousel.Item>\r\n                    <img src={ThirdSlide} alt=\"Third Slide\" className=\"d-block w-100\" />\r\n                    <Carousel.Caption>\r\n                        <h3 className=\"text-white\">Third slide label</h3>\r\n                        <p>Praesent commodo cursus magna, vel scelerisque nisl consectetur.</p>\r\n                    </Carousel.Caption>\r\n                </Carousel.Item>\r\n            </Carousel>\r\n        </>\r\n    );\r\n};\r\n\r\nconst Carousels = () => {\r\n    return (\r\n        <Card id=\"carousel\">\r\n            <Card.Body>\r\n                <Card.Title as=\"h5\" className=\"mb-0\">\r\n                    Carousel\r\n                </Card.Title>\r\n                <DefaultCarousel />\r\n                <CaptionCarousel />\r\n            </Card.Body>\r\n        </Card>\r\n    );\r\n};\r\n\r\nexport default Carousels;\r\n","import { Button, ButtonGroup, Card, Dropdown, DropdownButton } from 'react-bootstrap';\r\nimport FeatherIcon from 'feather-icons-react';\r\n\r\nconst DefaultDropdown = () => {\r\n    return (\r\n        <Dropdown className=\"me-2\">\r\n            <Dropdown.Toggle id=\"dropdown-basic\">\r\n                Dropdown Button\r\n                <FeatherIcon icon=\"chevron-down\" className=\"icon-xs ms-2\" />\r\n            </Dropdown.Toggle>\r\n            <Dropdown.Menu>\r\n                <Dropdown.Item eventKey=\"1\">Action</Dropdown.Item>\r\n                <Dropdown.Item eventKey=\"2\">Another action</Dropdown.Item>\r\n                <Dropdown.Item eventKey=\"3\">Something else here</Dropdown.Item>\r\n                <hr className=\"my-2\" />\r\n                <Dropdown.Item eventKey=\"4\">Separated link</Dropdown.Item>\r\n            </Dropdown.Menu>\r\n        </Dropdown>\r\n    );\r\n};\r\n\r\nconst SpiltDropdown = () => {\r\n    return (\r\n        <Dropdown as={ButtonGroup}>\r\n            <Button variant=\"secondary\">Split Button</Button>\r\n            <Dropdown.Toggle split variant=\"secondary\" id=\"dropdown-split-basic\">\r\n                <FeatherIcon icon=\"chevron-down\" className=\"icon-xs\" />\r\n            </Dropdown.Toggle>\r\n            <Dropdown.Menu>\r\n                <Dropdown.Item eventKey=\"1\">Action</Dropdown.Item>\r\n                <Dropdown.Item eventKey=\"2\">Another action</Dropdown.Item>\r\n                <Dropdown.Item eventKey=\"3\">Something else here</Dropdown.Item>\r\n                <hr className=\"my-2\" />\r\n                <Dropdown.Item eventKey=\"4\">Separated link</Dropdown.Item>\r\n            </Dropdown.Menu>\r\n        </Dropdown>\r\n    );\r\n};\r\n\r\nconst DropdownDiretion = () => {\r\n    return (\r\n        <>\r\n            <p className=\"sub-header mt-4\">\r\n                Trigger dropdown menus above, below, left, or to the right of their toggle elements, with the drop prop.\r\n            </p>\r\n            <div className=\"d-flex\">\r\n                <DropdownButton\r\n                    variant=\"success\"\r\n                    align=\"end\"\r\n                    title={\r\n                        <>\r\n                            Dropdown end\r\n                            <FeatherIcon icon=\"chevron-down\" className=\"icon-xs ms-2\" />\r\n                        </>\r\n                    }\r\n                    id=\"dropdown-menu-align-end\"\r\n                    className=\"me-2\"\r\n                >\r\n                    <Dropdown.Item eventKey=\"1\">Action</Dropdown.Item>\r\n                    <Dropdown.Item eventKey=\"2\">Another action</Dropdown.Item>\r\n                    <Dropdown.Item eventKey=\"3\">Something else here</Dropdown.Item>\r\n                    <hr className=\"my-2\" />\r\n                    <Dropdown.Item eventKey=\"4\">Separated link</Dropdown.Item>\r\n                </DropdownButton>\r\n\r\n                <DropdownButton\r\n                    variant=\"info\"\r\n                    drop=\"end\"\r\n                    title={\r\n                        <>\r\n                            Drop End\r\n                            <FeatherIcon icon=\"chevron-right\" className=\"icon-xs ms-2\" />\r\n                        </>\r\n                    }\r\n                    id=\"dropdown-menu-end\"\r\n                    className=\"me-2\"\r\n                >\r\n                    <Dropdown.Item eventKey=\"1\">Action</Dropdown.Item>\r\n                    <Dropdown.Item eventKey=\"2\">Another action</Dropdown.Item>\r\n                    <Dropdown.Item eventKey=\"3\">Something else here</Dropdown.Item>\r\n                    <hr className=\"my-2\" />\r\n                    <Dropdown.Item eventKey=\"4\">Separated link</Dropdown.Item>\r\n                </DropdownButton>\r\n\r\n                <DropdownButton\r\n                    variant=\"danger\"\r\n                    drop=\"start\"\r\n                    title={\r\n                        <>\r\n                            <FeatherIcon icon=\"chevron-left\" className=\"icon-xs me-2\" />\r\n                            Drop Start\r\n                        </>\r\n                    }\r\n                    id=\"dropdown-menu-start\"\r\n                    className=\"me-2\"\r\n                >\r\n                    <Dropdown.Item eventKey=\"1\">Action</Dropdown.Item>\r\n                    <Dropdown.Item eventKey=\"2\">Another action</Dropdown.Item>\r\n                    <Dropdown.Item eventKey=\"3\">Something else here</Dropdown.Item>\r\n                    <hr className=\"my-2\" />\r\n                    <Dropdown.Item eventKey=\"4\">Separated link</Dropdown.Item>\r\n                </DropdownButton>\r\n\r\n                <DropdownButton\r\n                    title={\r\n                        <>\r\n                            On Hover\r\n                            <FeatherIcon icon=\"chevron-down\" className=\"icon-xs ms-2\" />\r\n                        </>\r\n                    }\r\n                    id=\"dropdown-menu-on-hover\"\r\n                    renderMenuOnMount\r\n                >\r\n                    <Dropdown.Item eventKey=\"1\">Action</Dropdown.Item>\r\n                    <Dropdown.Item eventKey=\"2\">Another action</Dropdown.Item>\r\n                    <Dropdown.Item eventKey=\"3\">Something else here</Dropdown.Item>\r\n                    <hr className=\"my-2\" />\r\n                    <Dropdown.Item eventKey=\"4\">Separated link</Dropdown.Item>\r\n                </DropdownButton>\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nconst CustomeDropdown = () => {\r\n    return (\r\n        <div>\r\n            <p className=\"sub-header mt-4\">\r\n                You can put a form or simple text within a dropdown menu or set the different position\r\n            </p>\r\n            <Dropdown as={ButtonGroup} className=\"me-2\">\r\n                <Dropdown.Toggle className=\"cursor-pointer\">\r\n                    Simple text\r\n                    <FeatherIcon icon=\"chevron-down\" className=\"icon-xs ms-2\" />\r\n                </Dropdown.Toggle>\r\n                <Dropdown.Menu className=\"dropdown-menu-lg p-3\">\r\n                    <div className=\"text-muted\">\r\n                        <p>Some example text that's free-flowing within the dropdown menu.</p>\r\n                        <p className=\"mb-0\">And this is more example text.</p>\r\n                    </div>\r\n                </Dropdown.Menu>\r\n            </Dropdown>\r\n\r\n            <Dropdown as={ButtonGroup}>\r\n                <Dropdown.Toggle variant=\"secondary\" className=\"cursor-pointer\">\r\n                    Dropdown menu Forms\r\n                    <FeatherIcon icon=\"chevron-down\" className=\"icon-xs ms-2\" />\r\n                </Dropdown.Toggle>\r\n                <Dropdown.Menu className=\"dropdown-menu-lg p-3\">\r\n                    <form>\r\n                        <div className=\"mb-3\">\r\n                            <label htmlFor=\"exampleDropdownFormEmail1\" className=\"form-label\">\r\n                                Email address\r\n                            </label>\r\n                            <input\r\n                                type=\"email\"\r\n                                className=\"form-control\"\r\n                                id=\"exampleDropdownFormEmail1\"\r\n                                placeholder=\"email@example.com\"\r\n                            />\r\n                        </div>\r\n                        <div className=\"mb-3\">\r\n                            <label htmlFor=\"exampleDropdownFormPassword1\" className=\"form-label\">\r\n                                Password\r\n                            </label>\r\n                            <input\r\n                                type=\"password\"\r\n                                className=\"form-control\"\r\n                                id=\"exampleDropdownFormPassword1\"\r\n                                placeholder=\"Password\"\r\n                            />\r\n                        </div>\r\n                        <div className=\"mb-3\">\r\n                            <div className=\"form-check\">\r\n                                <input type=\"checkbox\" className=\"form-check-input\" id=\"dropdownCheck\" />\r\n                                <label className=\"form-check-label\" htmlFor=\"dropdownCheck\">\r\n                                    Remember me\r\n                                </label>\r\n                            </div>\r\n                        </div>\r\n                        <button type=\"submit\" className=\"btn btn-primary\">\r\n                            Sign in\r\n                        </button>\r\n                    </form>\r\n                </Dropdown.Menu>\r\n            </Dropdown>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst Dropdowns = () => {\r\n    return (\r\n        <Card id=\"dropdowns\">\r\n            <Card.Body>\r\n                <Card.Title as=\"h5\" className=\"mb-0\">\r\n                    Dropdowns\r\n                </Card.Title>\r\n\r\n                <p className=\"sub-header\">\r\n                    Toggle contextual overlays for displaying lists of links and more with the Bootstrap dropdown\r\n                    plugin.\r\n                </p>\r\n\r\n                <div className=\"d-sm-inline-flex mb-2 mb-sm-0\">\r\n                    <DefaultDropdown />\r\n                    <SpiltDropdown />\r\n                </div>\r\n\r\n                <DropdownDiretion />\r\n                <CustomeDropdown />\r\n            </Card.Body>\r\n        </Card>\r\n    );\r\n};\r\n\r\nexport default Dropdowns;\r\n","import { Card, Col, Form, Row } from 'react-bootstrap';\r\nimport FeatherIcon from 'feather-icons-react';\r\n\r\nconst BasicFormInput = () => {\r\n    return (\r\n        <Form>\r\n            <Row>\r\n                <Col sm={6}>\r\n                    <Form.Group className=\"mb-3\" controlId=\"formBasicText\">\r\n                        <Form.Label>Text Input</Form.Label>\r\n                        <Form.Control type=\"text\" placeholder=\"A text input\" />\r\n                    </Form.Group>\r\n                    <Form.Group className=\"mb-3\" controlId=\"formBasicPassword\">\r\n                        <Form.Label>Password Input</Form.Label>\r\n                        <Form.Control type=\"password\" defaultValue=\"123456\" />\r\n                    </Form.Group>\r\n                </Col>\r\n                <Col sm={6}>\r\n                    <Form.Group className=\"mb-3\" controlId=\"formBasicTextArea\">\r\n                        <Form.Label>Example textarea</Form.Label>\r\n                        <Form.Control as=\"textarea\" rows={5} />\r\n                    </Form.Group>\r\n                </Col>\r\n                <Col sm={6}>\r\n                    <Form.Group className=\"mb-3\" controlId=\"formBasicSelect\">\r\n                        <Form.Label>Default Select</Form.Label>\r\n                        <Form.Select aria-label=\"Default select example\">\r\n                            <option>Default Option</option>\r\n                            <option value=\"1\">Option Select Name</option>\r\n                            <option value=\"2\">Option Select Name</option>\r\n                        </Form.Select>\r\n                    </Form.Group>\r\n                    <Form.Group className=\"mb-3\" controlId=\"formBasicFileUpload\">\r\n                        <Form.Label>File Upload</Form.Label>\r\n                        <Form.Control type=\"file\" />\r\n                    </Form.Group>\r\n                </Col>\r\n                <Col sm={6}>\r\n                    <Form.Group className=\"mb-3\" controlId=\"formBasicDefaultSelect\">\r\n                        <Form.Label>Default Select Multiple</Form.Label>\r\n                        <select className=\"form-select\" multiple>\r\n                            <option value=\"option_select0\">Default Option</option>\r\n                            <option value=\"option_select1\">Option select name</option>\r\n                            <option value=\"option_select2\">Option select name</option>\r\n                            <option value=\"option_select2\">Option select name</option>\r\n                            <option value=\"option_select2\">Option select name</option>\r\n                        </select>\r\n                    </Form.Group>\r\n                </Col>\r\n                <Col sm={6}>\r\n                    <Form.Group className=\"mb-3\" controlId=\"formBasicInputIcon\">\r\n                        <Form.Label>Input with icon</Form.Label>\r\n                        <div className=\"form-control-with-hint\">\r\n                            <input type=\"text\" className=\"form-control\" placeholder=\"Input placeholder\" />\r\n                            <span className=\"form-control-feedback\">\r\n                                <FeatherIcon icon=\"search\" className=\"icon-xs\" />\r\n                            </span>\r\n                        </div>\r\n                    </Form.Group>\r\n                </Col>\r\n                <Col sm={6}>\r\n                    <Form.Group className=\"mb-3\" controlId=\"formBasicDefaultSelect\">\r\n                        <Form.Label>Input with hint text</Form.Label>\r\n                        <div className=\"form-control-with-hint\">\r\n                            <input type=\"text\" className=\"form-control\" placeholder=\"Input placeholder\" />\r\n                            <span className=\"form-control-feedback\">USD</span>\r\n                        </div>\r\n                    </Form.Group>\r\n                </Col>\r\n            </Row>\r\n        </Form>\r\n    );\r\n};\r\n\r\nconst FormInputSize = () => {\r\n    return (\r\n        <Form>\r\n            <Row>\r\n                <Col md={4}>\r\n                    <Form.Control size=\"lg\" type=\"text\" placeholder=\".form-control-lg\" />\r\n                </Col>\r\n                <Col md={4}>\r\n                    <Form.Control type=\"text\" placeholder=\"Default input\" />\r\n                </Col>\r\n                <Col md={4}>\r\n                    <Form.Control size=\"sm\" type=\"text\" placeholder=\".form-control-sm\" />\r\n                </Col>\r\n            </Row>\r\n        </Form>\r\n    );\r\n};\r\n\r\nconst Checkbox = () => {\r\n    return (\r\n        <Form>\r\n            <Form.Check type=\"checkbox\" id=\"checkbox1\" label=\"Check this custom checkbox\" />\r\n            <Form.Check type=\"checkbox\" id=\"checkbox2\" label=\"Check this custom checkbox 2\" />\r\n        </Form>\r\n    );\r\n};\r\n\r\nconst Radio = () => {\r\n    return (\r\n        <Form>\r\n            <Form.Check type=\"radio\" id=\"radio1\" label=\"Check this custom radio\" name=\"radio\" />\r\n            <Form.Check type=\"radio\" id=\"radio2\" label=\"Check this custom radio 2\" name=\"radio\" />\r\n        </Form>\r\n    );\r\n};\r\n\r\nconst Range = () => {\r\n    return (\r\n        <Form>\r\n            <Form.Range />\r\n        </Form>\r\n    );\r\n};\r\n\r\nconst FormElements = () => {\r\n    return (\r\n        <Card id=\"forms\">\r\n            <Card.Body>\r\n                <Card.Title as=\"h5\" className=\"mb-0\">\r\n                    Form Elements\r\n                </Card.Title>\r\n                <p className=\"sub-header\">\r\n                    Examples and usage guidelines for form control styles, layout options, and custom components for\r\n                    creating a wide variety of forms.\r\n                </p>\r\n\r\n                <BasicFormInput />\r\n\r\n                <p className=\"sub-header mt-4\">\r\n                    Use <code>size</code> on <code>&lt;FormControl&gt;</code> to change the size of the input.\r\n                </p>\r\n\r\n                <FormInputSize />\r\n\r\n                <p className=\"sub-header mt-4\">\r\n                    By default, any number of checkboxes and radios that are immediate sibling will be vertically\r\n                    stacked and appropriately spaced with FormCheck.\r\n                </p>\r\n\r\n                <Row>\r\n                    <Col sm={6}>\r\n                        <Checkbox />\r\n                    </Col>\r\n                    <Col sm={6}>\r\n                        <Radio />\r\n                    </Col>\r\n                </Row>\r\n\r\n                <p className=\"sub-header mt-4\">\r\n                    Use our custom range inputs for consistent cross-browser styling and built-in customization.\r\n                </p>\r\n\r\n                <Range />\r\n            </Card.Body>\r\n        </Card>\r\n    );\r\n};\r\n\r\nexport default FormElements;\r\n","import { Card, Nav, Tab } from 'react-bootstrap';\r\n\r\ntype TabContentType = {\r\n    id: number;\r\n    title: string;\r\n    icon?: string;\r\n    text: string;\r\n    text2: string;\r\n};\r\n\r\nconst tabContents: TabContentType[] = [\r\n    {\r\n        id: 1,\r\n        title: 'Home',\r\n        icon: 'uil-home-alt',\r\n        text: `Vakal text here dolor sit amet,consectetuer adipiscing elit. Aenean\r\n                commodo ligula eget dolor.Aenean massa.Cum sociis natoque\r\n                penatibus et magnis dis parturient montes, nascetur ridiculus mus.\r\n                Donec quam felis, ultricies nec, pellentesque eu, pretium quis, sem.\r\n                Nulla consequat massa quis enim.`,\r\n        text2: `Donec pede justo, fringilla vel, aliquet nec, vulputate\r\n                eget, arcu. In enim justo, rhoncus ut, imperdiet a, venenatis vitae,\r\n                justo. Nullam dictum felis eu pede mollis pretium. Integer\r\n                tincidunt.Cras dapibus. Vivamus elementum semper nisi. Aenean\r\n                vulputate eleifend tellus. Aenean leo ligula, porttitor eu,\r\n                consequat vitae, eleifend ac, enim.`,\r\n    },\r\n    {\r\n        id: 2,\r\n        title: 'Profile',\r\n        icon: 'uil-user',\r\n        text: `Donec pede justo, fringilla vel, aliquet nec, vulputate eget, arcu.\r\n                In enim justo, rhoncus ut, imperdiet a, venenatis vitae, justo.\r\n                Nullam dictum felis eu pede mollis pretium. Integer tincidunt.Cras\r\n                dapibus. Vivamus elementum semper nisi. Aenean vulputate eleifend\r\n                tellus. Aenean leo ligula, porttitor eu, consequat vitae, eleifend\r\n                ac, enim.`,\r\n        text2: `Vakal text here dolor sit amet, consectetuer adipiscing\r\n                elit. Aenean commodo ligula eget dolor. Aenean massa. Cum sociis\r\n                natoque penatibus et magnis dis parturient montes, nascetur\r\n                ridiculus mus. Donec quam felis, ultricies nec, pellentesque eu,\r\n                pretium quis, sem. Nulla consequat massa quis enim.`,\r\n    },\r\n    {\r\n        id: 3,\r\n        title: 'Messages',\r\n        icon: 'uil-envelope',\r\n        text: `Vakal text here dolor sit amet,consectetuer adipiscing elit. Aenean\r\n                commodo ligula eget dolor.Aenean massa.Cum sociis natoque\r\n                penatibus et magnis dis parturient montes, nascetur ridiculus mus.\r\n                Donec quam felis, ultricies nec, pellentesque eu, pretium quis, sem.\r\n                Nulla consequat massa quis enim.`,\r\n        text2: `Donec pede justo, fringilla vel, aliquet nec, vulputate\r\n                eget, arcu. In enim justo, rhoncus ut, imperdiet a, venenatis vitae,\r\n                justo. Nullam dictum felis eu pede mollis pretium. Integer\r\n                tincidunt.Cras dapibus. Vivamus elementum semper nisi. Aenean\r\n                vulputate eleifend tellus. Aenean leo ligula, porttitor eu,\r\n                consequat vitae, eleifend ac, enim.`,\r\n    },\r\n];\r\n\r\nconst NavTabs = () => {\r\n    return (\r\n        <Tab.Container defaultActiveKey=\"Profile\">\r\n            <Nav as=\"ul\" variant=\"tabs\">\r\n                {(tabContents || []).map((tab, index) => {\r\n                    return (\r\n                        <Nav.Item as=\"li\" key={index.toString()}>\r\n                            <Nav.Link className=\"cursor-pointer\" eventKey={tab.title}>\r\n                                <span className=\"d-block d-sm-none\">\r\n                                    <i className={tab.icon}></i>\r\n                                </span>\r\n                                <span className=\"d-none d-sm-block\">{tab.title}</span>\r\n                            </Nav.Link>\r\n                        </Nav.Item>\r\n                    );\r\n                })}\r\n            </Nav>\r\n            <Tab.Content className=\"p-3 text-muted\">\r\n                {(tabContents || []).map((tab, index) => {\r\n                    return (\r\n                        <Tab.Pane eventKey={tab.title} id={String(tab.id)} key={index.toString()}>\r\n                            <p>{tab.text}</p>\r\n                            <p className=\"mb-0\">{tab.text2}</p>\r\n                        </Tab.Pane>\r\n                    );\r\n                })}\r\n            </Tab.Content>\r\n        </Tab.Container>\r\n    );\r\n};\r\n\r\nconst NavPills = () => {\r\n    return (\r\n        <Tab.Container defaultActiveKey=\"Profile\">\r\n            <Nav as=\"ul\" justify variant=\"pills\" className=\"p-1 navtab-bg\">\r\n                {(tabContents || []).map((tab, index) => {\r\n                    return (\r\n                        <Nav.Item as=\"li\" key={index.toString()}>\r\n                            <Nav.Link className=\"cursor-pointer\" eventKey={tab.title}>\r\n                                <span className=\"d-block d-sm-none\">\r\n                                    <i className={tab.icon}></i>\r\n                                </span>\r\n                                <span className=\"d-none d-sm-block\">{tab.title}</span>\r\n                            </Nav.Link>\r\n                        </Nav.Item>\r\n                    );\r\n                })}\r\n            </Nav>\r\n            <Tab.Content className=\"text-muted\">\r\n                {(tabContents || []).map((tab, index) => {\r\n                    return (\r\n                        <Tab.Pane eventKey={tab.title} id={String(tab.id)} key={index.toString()}>\r\n                            <p>{tab.text}</p>\r\n                            <p className=\"mb-0\">{tab.text2}</p>\r\n                        </Tab.Pane>\r\n                    );\r\n                })}\r\n            </Tab.Content>\r\n        </Tab.Container>\r\n    );\r\n};\r\n\r\nconst TabsExample = () => {\r\n    return (\r\n        <Card id=\"tabs\">\r\n            <Card.Body>\r\n                <Card.Title as=\"h5\" className=\"mb-0\">\r\n                    Tabs\r\n                </Card.Title>\r\n                <p className=\"sub-header\">\r\n                    <code>Tabs</code> is a higher-level component for quickly creating a <code>Nav</code> matched with a\r\n                    set of <code>TabPanes</code>.\r\n                </p>\r\n\r\n                <NavTabs />\r\n                <NavPills />\r\n            </Card.Body>\r\n        </Card>\r\n    );\r\n};\r\n\r\nexport default TabsExample;\r\n","import { useState } from 'react';\r\nimport { Button, Card, Form, Modal } from 'react-bootstrap';\r\nimport FeatherIcon from 'feather-icons-react';\r\n\r\nconst StandardModal = () => {\r\n    const [show, setShow] = useState<boolean>(false);\r\n\r\n    const handleClose = () => setShow(false);\r\n    const handleShow = () => setShow(true);\r\n\r\n    return (\r\n        <>\r\n            <div className=\"button-list me-2 mb-2 mb-sm-0\">\r\n                <Button className=\"btn-soft-primary\" onClick={handleShow}>\r\n                    Standard modal\r\n                </Button>\r\n            </div>\r\n\r\n            {/* standard modal */}\r\n            <Modal show={show} onHide={handleClose}>\r\n                <Modal.Header onHide={handleClose} closeButton>\r\n                    <Modal.Title as=\"h5\">Modal Heading</Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    <h5>You are out of storage space.</h5>\r\n                    <p>To upload more data, please add additional storage space.</p>\r\n                    <Form>\r\n                        <Form.Label>Select Size: </Form.Label>\r\n                        <Form.Select aria-label=\"selectSize\">\r\n                            <option selected>Choose...</option>\r\n                            <option value=\"1\">1 GB</option>\r\n                            <option value=\"10\">10 GB</option>\r\n                            <option value=\"50\">50 GB</option>\r\n                            <option value=\"100\">100 GB</option>\r\n                            <option value=\"500\">500 GB</option>\r\n                            <option value=\"1000\">1 TB</option>\r\n                        </Form.Select>\r\n                    </Form>\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button variant=\"white\" onClick={handleClose}>\r\n                        Cancle\r\n                    </Button>{' '}\r\n                    <Button onClick={handleClose}>Upgrade</Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n        </>\r\n    );\r\n};\r\n\r\nconst ModalSizes = () => {\r\n    const [show, setShow] = useState<boolean>(false);\r\n    const [size, setSize] = useState<'sm' | 'lg' | 'xl'>();\r\n\r\n    const handleClose = () => setShow(false);\r\n    const handleShow = () => setShow(true);\r\n\r\n    const openModalWithSize = (size: 'sm' | 'lg' | 'xl') => {\r\n        setSize(size);\r\n        handleShow();\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <div className=\"button-list\">\r\n                <Button className=\"btn-soft-secondary me-2 mb-2 mb-sm-0\" onClick={() => openModalWithSize('xl')}>\r\n                    Extra large modal\r\n                </Button>\r\n                <Button className=\"btn-soft-success me-2 mb-2 mb-sm-0\" onClick={() => openModalWithSize('lg')}>\r\n                    Large modal\r\n                </Button>\r\n                <Button className=\"btn-soft-info me-2 mb-2 mb-sm-0\" onClick={() => openModalWithSize('sm')}>\r\n                    Small Modal\r\n                </Button>\r\n            </div>\r\n            <Modal show={show} onHide={handleClose} size={size}>\r\n                <Modal.Header onHide={handleClose} closeButton>\r\n                    <Modal.Title as=\"h5\">Modal Heading</Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>...</Modal.Body>\r\n            </Modal>\r\n        </>\r\n    );\r\n};\r\n\r\nconst VerticallyCenteredModal = () => {\r\n    const [showCenteredModal, setShowCenteredModal] = useState<boolean>(false);\r\n\r\n    return (\r\n        <>\r\n            <p className=\"sub-header mt-4\">\r\n                You can vertically center a modal by passing the <code>centered</code> prop.\r\n            </p>\r\n            <div className=\"button-list\">\r\n                <Button className=\"btn-soft-primary\" onClick={() => setShowCenteredModal(true)}>\r\n                    Vertically center\r\n                </Button>\r\n            </div>\r\n\r\n            <Modal show={showCenteredModal} onHide={() => setShowCenteredModal(false)} centered>\r\n                <Modal.Header onHide={() => setShowCenteredModal(false)} closeButton>\r\n                    <Modal.Title as=\"h5\">Center modal</Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    <h5>Overflowing text to show scroll behavior</h5>\r\n                    <p>\r\n                        Cras mattis consectetur purus sit amet fermentum. Cras justo odio, dapibus ac facilisis in,\r\n                        egestas eget quam. Morbi leo risus, porta ac consectetur ac, vestibulum at eros.\r\n                    </p>\r\n                    <p className=\"mb-0\">\r\n                        Praesent commodo cursus magna, vel scelerisque nisl consectetur et. Vivamus sagittis lacus vel\r\n                        augue laoreet rutrum faucibus dolor auctor.\r\n                    </p>\r\n                </Modal.Body>\r\n            </Modal>\r\n        </>\r\n    );\r\n};\r\n\r\nconst ScrollableModal = () => {\r\n    const [showScrollableModal, setShowScrollableModal] = useState<boolean>(false);\r\n\r\n    return (\r\n        <>\r\n            <p className=\"sub-header mt-4\">\r\n                Allows scrolling the <code>&lt;Modal.Body&gt;</code> instead of the entire Modal when overflowing.\r\n            </p>\r\n            <div className=\"button-list\">\r\n                <Button className=\"btn-soft-primary\" onClick={() => setShowScrollableModal(true)}>\r\n                    Scrollable\r\n                </Button>\r\n            </div>\r\n            <Modal show={showScrollableModal} onHide={() => setShowScrollableModal(false)} scrollable>\r\n                <Modal.Header onHide={() => setShowScrollableModal(false)} closeButton>\r\n                    <Modal.Title as=\"h5\">Modal title</Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    <p>\r\n                        Cras mattis consectetur purus sit amet fermentum. Cras justo odio, dapibus ac facilisis in,\r\n                        egestas eget quam. Morbi leo risus, porta ac consectetur ac, vestibulum at eros.\r\n                    </p>\r\n                    <p>\r\n                        Praesent commodo cursus magna, vel scelerisque nisl consectetur et. Vivamus sagittis lacus vel\r\n                        augue laoreet rutrum faucibus dolor auctor.\r\n                    </p>\r\n                    <p>\r\n                        Aenean lacinia bibendum nulla sed consectetur. Praesent commodo cursus magna, vel scelerisque\r\n                        nisl consectetur et. Donec sed odio dui. Donec ullamcorper nulla non metus auctor fringilla.\r\n                    </p>\r\n                    <p>\r\n                        Cras mattis consectetur purus sit amet fermentum. Cras justo odio, dapibus ac facilisis in,\r\n                        egestas eget quam. Morbi leo risus, porta ac consectetur ac, vestibulum at eros.\r\n                    </p>\r\n                    <p>\r\n                        Praesent commodo cursus magna, vel scelerisque nisl consectetur et. Vivamus sagittis lacus vel\r\n                        augue laoreet rutrum faucibus dolor auctor.\r\n                    </p>\r\n                    <p>\r\n                        Aenean lacinia bibendum nulla sed consectetur. Praesent commodo cursus magna, vel scelerisque\r\n                        nisl consectetur et. Donec sed odio dui. Donec ullamcorper nulla non metus auctor fringilla.\r\n                    </p>\r\n                    <p>\r\n                        Cras mattis consectetur purus sit amet fermentum. Cras justo odio, dapibus ac facilisis in,\r\n                        egestas eget quam. Morbi leo risus, porta ac consectetur ac, vestibulum at eros.\r\n                    </p>\r\n                    <p>\r\n                        Praesent commodo cursus magna, vel scelerisque nisl consectetur et. Vivamus sagittis lacus vel\r\n                        augue laoreet rutrum faucibus dolor auctor.\r\n                    </p>\r\n                    <p>\r\n                        Aenean lacinia bibendum nulla sed consectetur. Praesent commodo cursus magna, vel scelerisque\r\n                        nisl consectetur et. Donec sed odio dui. Donec ullamcorper nulla non metus auctor fringilla.\r\n                    </p>\r\n                    <p>\r\n                        Cras mattis consectetur purus sit amet fermentum. Cras justo odio, dapibus ac facilisis in,\r\n                        egestas eget quam. Morbi leo risus, porta ac consectetur ac, vestibulum at eros.\r\n                    </p>\r\n                    <p>\r\n                        Praesent commodo cursus magna, vel scelerisque nisl consectetur et. Vivamus sagittis lacus vel\r\n                        augue laoreet rutrum faucibus dolor auctor.\r\n                    </p>\r\n                    <p>\r\n                        Aenean lacinia bibendum nulla sed consectetur. Praesent commodo cursus magna, vel scelerisque\r\n                        nisl consectetur et. Donec sed odio dui. Donec ullamcorper nulla non metus auctor fringilla.\r\n                    </p>\r\n                    <p>\r\n                        Cras mattis consectetur purus sit amet fermentum. Cras justo odio, dapibus ac facilisis in,\r\n                        egestas eget quam. Morbi leo risus, porta ac consectetur ac, vestibulum at eros.\r\n                    </p>\r\n                    <p>\r\n                        Praesent commodo cursus magna, vel scelerisque nisl consectetur et. Vivamus sagittis lacus vel\r\n                        augue laoreet rutrum faucibus dolor auctor.\r\n                    </p>\r\n                    <p>\r\n                        Aenean lacinia bibendum nulla sed consectetur. Praesent commodo cursus magna, vel scelerisque\r\n                        nisl consectetur et. Donec sed odio dui. Donec ullamcorper nulla non metus auctor fringilla.\r\n                    </p>\r\n                    <p>\r\n                        Cras mattis consectetur purus sit amet fermentum. Cras justo odio, dapibus ac facilisis in,\r\n                        egestas eget quam. Morbi leo risus, porta ac consectetur ac, vestibulum at eros.\r\n                    </p>\r\n                    <p>\r\n                        Praesent commodo cursus magna, vel scelerisque nisl consectetur et. Vivamus sagittis lacus vel\r\n                        augue laoreet rutrum faucibus dolor auctor.\r\n                    </p>\r\n                    <p>\r\n                        Aenean lacinia bibendum nulla sed consectetur. Praesent commodo cursus magna, vel scelerisque\r\n                        nisl consectetur et. Donec sed odio dui. Donec ullamcorper nulla non metus auctor fringilla.\r\n                    </p>\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button variant=\"light\" onClick={() => setShowScrollableModal(false)}>\r\n                        Close\r\n                    </Button>\r\n                    <Button variant=\"primary\">Save changes</Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n        </>\r\n    );\r\n};\r\n\r\nconst ModalWithAlerts = () => {\r\n    const [showSuccessModal, setShowSuccessModal] = useState<boolean>(false);\r\n    const [showErrorModal, setShowErrorModal] = useState<boolean>(false);\r\n\r\n    const successClose = () => setShowSuccessModal(false);\r\n    const errorClose = () => setShowErrorModal(false);\r\n\r\n    return (\r\n        <>\r\n            <p className=\"sub-header mt-4\">\r\n                A modal can be used to show contexual messages including success, error, warning, information messages,\r\n                etc.\r\n            </p>\r\n\r\n            <div className=\"button-list\">\r\n                <Button className=\"btn-soft-success me-2\" onClick={() => setShowSuccessModal(true)}>\r\n                    Success\r\n                </Button>\r\n                <Button className=\"btn-soft-danger\" onClick={() => setShowErrorModal(true)}>\r\n                    Error\r\n                </Button>\r\n            </div>\r\n\r\n            {/* Success Modal */}\r\n            <Modal show={showSuccessModal} onHide={() => setShowSuccessModal(false)} size=\"sm\" centered>\r\n                <Modal.Header onHide={() => setShowSuccessModal(false)} closeButton className=\"border-0 pb-0\" />\r\n                <Modal.Body className=\"text-center\">\r\n                    <span className=\"icon icon-lg text-success\">\r\n                        <FeatherIcon icon=\"check-circle\" className=\"icon-dual-success\" />\r\n                    </span>\r\n                    <h4 className=\"text-success mt-0\">Awesome!</h4>\r\n                    <p className=\"mx-auto text-muted\">We receieved your application and will process it shortly.</p>\r\n                    <div className=\"mt-4\">\r\n                        <Button variant=\"white btn-sm\" onClick={successClose}>\r\n                            <FeatherIcon icon=\"arrow-left\" className=\"icon-xs me-1\" /> Back\r\n                        </Button>\r\n                    </div>\r\n                </Modal.Body>\r\n            </Modal>\r\n\r\n            {/* Erroe Modal */}\r\n            <Modal show={showErrorModal} onHide={() => setShowErrorModal(false)} size=\"sm\" centered>\r\n                <Modal.Header onHide={() => setShowErrorModal(false)} closeButton className=\"border-0 pb-0\" />\r\n                <Modal.Body className=\"text-center\">\r\n                    <span className=\"icon icon-md text-danger\">\r\n                        <FeatherIcon icon=\"alert-octagon\" className=\"icon-dual-danger\" />\r\n                    </span>\r\n                    <h4 className=\"text-danger mt-0\">Something went wrong.</h4>\r\n                    <p className=\"mx-auto text-muted mt-2\">\r\n                        We are unable to process your request at the moment. Our appologies, try back in about 5\r\n                        minutes.\r\n                    </p>\r\n                    <div className=\"mt-4\">\r\n                        <Button variant=\"white btn-sm\" onClick={errorClose}>\r\n                            <FeatherIcon icon=\"arrow-left\" className=\"icon-xs me-1\" /> Back\r\n                        </Button>\r\n                    </div>\r\n                </Modal.Body>\r\n            </Modal>\r\n        </>\r\n    );\r\n};\r\n\r\nconst Modals = () => {\r\n    return (\r\n        <Card id=\"modals\">\r\n            <Card.Body>\r\n                <Card.Title as=\"h5\" className=\"mb-0\">\r\n                    Modals\r\n                </Card.Title>\r\n                <p className=\"sub-header\">\r\n                    Add dialogs to your site for lightboxes, user notifications, or completely custom content.\r\n                </p>\r\n\r\n                <div className=\"d-flex\">\r\n                    <StandardModal />\r\n                    <ModalSizes />\r\n                </div>\r\n\r\n                <VerticallyCenteredModal />\r\n                <ScrollableModal />\r\n                <ModalWithAlerts />\r\n            </Card.Body>\r\n        </Card>\r\n    );\r\n};\r\n\r\nexport default Modals;\r\n","import { Card, ProgressBar } from 'react-bootstrap';\r\n\r\nconst Progressbars = () => {\r\n    return (\r\n        <Card id=\"progressbars\">\r\n            <Card.Body>\r\n                <Card.Title as=\"h5\" className=\"mb-0\">\r\n                    Progress\r\n                </Card.Title>\r\n                <p className=\"sub-header\">\r\n                    Bootstrap custom progress bars featuring support for stacked bars, animated backgrounds, and text\r\n                    labels\r\n                </p>\r\n\r\n                <div>\r\n                    <ProgressBar now={0} className=\"mb-3\" />\r\n                    <ProgressBar now={33} className=\"mb-3\" />\r\n                    <ProgressBar now={66} variant=\"success\" className=\"mb-3\" />\r\n                    <ProgressBar now={100} variant=\"danger\" className=\"mb-3\" />\r\n                    <ProgressBar now={25} variant=\"info\" label=\"25%\" className=\"mb-3\" />\r\n                </div>\r\n\r\n                <p className=\"sub-header mt-4\">\r\n                    Uses a gradient to create a striped effect, and Add <code>animated</code> prop to animate the\r\n                    stripes right to left.\r\n                </p>\r\n\r\n                <div>\r\n                    <ProgressBar striped now={10} className=\"mb-3\" />\r\n                    <ProgressBar animated now={75} className=\"mb-3\" />\r\n                </div>\r\n\r\n                <p className=\"sub-header mt-4\">\r\n                    We can set a <code>height</code> value on the <code>.progress</code>. The inner{' '}\r\n                    <code>.progress-bar</code> will automatically resize accordingly.\r\n                </p>\r\n\r\n                <div>\r\n                    <ProgressBar now={25} className=\"mb-3\" style={{ height: '2px' }} />\r\n                    <ProgressBar now={25} className=\"mb-3\" style={{ height: '16px' }} />\r\n                </div>\r\n            </Card.Body>\r\n        </Card>\r\n    );\r\n};\r\n\r\nexport default Progressbars;\r\n","import { Card, Pagination } from 'react-bootstrap';\r\n\r\nconst Paginations = () => {\r\n    return (\r\n        <Card id=\"pagination\">\r\n            <Card.Body>\r\n                <Card.Title as=\"h5\" className=\"mb-0\">\r\n                    Pagination\r\n                </Card.Title>\r\n                <p className=\"sub-header\">\r\n                    Examples for showing pagination to indicate a series of related content exists across multiple pages\r\n                </p>\r\n\r\n                <Pagination>\r\n                    <Pagination.Prev>Previous</Pagination.Prev>\r\n                    <Pagination.Item>{1}</Pagination.Item>\r\n                    <Pagination.Item>{2}</Pagination.Item>\r\n                    <Pagination.Item>{3}</Pagination.Item>\r\n                    <Pagination.Next>Next</Pagination.Next>\r\n                </Pagination>\r\n\r\n                <p className=\"sub-header mt-4\">\r\n                    You can use icon instead of showing text label for previous and next actions\r\n                </p>\r\n\r\n                <Pagination>\r\n                    <Pagination.Prev />\r\n                    <Pagination.Item>{1}</Pagination.Item>\r\n                    <Pagination.Item>{2}</Pagination.Item>\r\n                    <Pagination.Item>{3}</Pagination.Item>\r\n                    <Pagination.Next />\r\n                </Pagination>\r\n\r\n                <p className=\"sub-header mt-4\">\r\n                    Just add class modifier <code>.pagination-rounded</code> to\r\n                    <code>.pagination</code> in order to have rounded page action link\r\n                </p>\r\n\r\n                <Pagination className=\"pagination-rounded\">\r\n                    <Pagination.Prev />\r\n                    <Pagination.Item>{1}</Pagination.Item>\r\n                    <Pagination.Item>{2}</Pagination.Item>\r\n                    <Pagination.Item>{3}</Pagination.Item>\r\n                    <Pagination.Next />\r\n                </Pagination>\r\n            </Card.Body>\r\n        </Card>\r\n    );\r\n};\r\n\r\nexport default Paginations;\r\n","import { Card, Spinner } from 'react-bootstrap';\r\n\r\n// types\r\nimport { Variant } from '../types';\r\n\r\ntype SpinnersProps = {\r\n    variants: Variant[];\r\n};\r\n\r\nconst Spinners = ({ variants }: SpinnersProps) => {\r\n    return (\r\n        <Card id=\"spinners\">\r\n            <Card.Body>\r\n                <Card.Title as=\"h5\" className=\"mb-0\">\r\n                    Spinners\r\n                </Card.Title>\r\n                <p className=\"sub-header\">Spinners can be used to show the loading state in your projects.</p>\r\n\r\n                {(variants || []).map((color, index) => {\r\n                    return (\r\n                        <Spinner animation=\"border\" key={index.toString()} className=\"m-2\" variant={color}>\r\n                            <span className=\"visually-hidden\">Loading...</span>\r\n                        </Spinner>\r\n                    );\r\n                })}\r\n\r\n                <p className=\"sub-header mt-4\">\r\n                    If you don't fancy a border spinner, switch to the grow spinner. While it doesn't technically spin,\r\n                    it does repeatedly grow!\r\n                </p>\r\n\r\n                {(variants || []).map((color, index) => {\r\n                    return (\r\n                        <Spinner animation=\"grow\" key={index.toString()} className=\"m-2\" variant={color}>\r\n                            <span className=\"visually-hidden\">Loading...</span>\r\n                        </Spinner>\r\n                    );\r\n                })}\r\n            </Card.Body>\r\n        </Card>\r\n    );\r\n};\r\n\r\nexport default Spinners;\r\n","import { useState } from 'react';\r\nimport { Button, Card, Dropdown, Offcanvas } from 'react-bootstrap';\r\n\r\ntype PlacementOptions = {\r\n    name: string;\r\n    placement?: 'start' | 'end' | 'top' | 'bottom';\r\n};\r\n\r\nconst OffcanvasPlacement = ({ name, placement }: PlacementOptions) => {\r\n    const [show, setShow] = useState<boolean>(false);\r\n\r\n    const toggle = () => {\r\n        setShow((prevState) => !prevState);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Button className=\"btn-soft-primary me-2\" onClick={toggle}>\r\n                {name} offcanvas\r\n            </Button>\r\n            <Offcanvas show={show} onHide={toggle} placement={placement}>\r\n                <Offcanvas.Header closeButton>\r\n                    <h5 id=\"offcanvasTopLabel\">Offcanvas {placement}</h5>\r\n                </Offcanvas.Header>\r\n                <Offcanvas.Body>\r\n                    <div>\r\n                        Some text as placeholder. In real life you can have the elements you have chosen. Like, text,\r\n                        images, lists, etc.\r\n                    </div>\r\n                    <Dropdown className=\"mt-3\">\r\n                        <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\" className=\"cursor-pointer\">\r\n                            Dropdown button <i className=\"uil uil-angle-down\"></i>\r\n                        </Dropdown.Toggle>\r\n\r\n                        <Dropdown.Menu>\r\n                            <Dropdown.Item href=\"#\">Action</Dropdown.Item>\r\n                            <Dropdown.Item href=\"#\">Another action</Dropdown.Item>\r\n                            <Dropdown.Item href=\"#\">Something else here</Dropdown.Item>\r\n                        </Dropdown.Menu>\r\n                    </Dropdown>\r\n                </Offcanvas.Body>\r\n            </Offcanvas>\r\n        </>\r\n    );\r\n};\r\n\r\nconst OffcanvasExample = () => {\r\n    const placementOptions: PlacementOptions[] = [\r\n        {\r\n            name: 'Top',\r\n            placement: 'top',\r\n        },\r\n        {\r\n            name: 'Bottom',\r\n            placement: 'bottom',\r\n        },\r\n        {\r\n            name: 'Left',\r\n            placement: 'start',\r\n        },\r\n        {\r\n            name: 'Right',\r\n            placement: 'end',\r\n        },\r\n    ];\r\n\r\n    return (\r\n        <Card id=\"offcanvas\">\r\n            <Card.Body>\r\n                <Card.Title as=\"h5\" className=\"mb-0\">\r\n                    Offcanvas\r\n                </Card.Title>\r\n                <p className=\"sub-header\">\r\n                    Build hidden sidebars into your project for navigation, shopping carts, and more. Offcanvas supports\r\n                    a few different placements:\r\n                </p>\r\n                <ul>\r\n                    <li>\r\n                        <code>start</code> places offcanvas on the left of the viewport\r\n                    </li>\r\n                    <li>\r\n                        <code>end</code> places offcanvas on the right of the viewport\r\n                    </li>\r\n                    <li>\r\n                        <code>top</code> places offcanvas on the top of the viewport\r\n                    </li>\r\n                    <li>\r\n                        <code>bottom</code> places offcanvas on the bottom of the viewport\r\n                    </li>\r\n                </ul>\r\n\r\n                <div className=\"button-list\">\r\n                    {(placementOptions || []).map((option, index) => (\r\n                        <OffcanvasPlacement key={index.toString()} placement={option.placement!} name={option.name} />\r\n                    ))}\r\n                </div>\r\n            </Card.Body>\r\n        </Card>\r\n    );\r\n};\r\n\r\nexport default OffcanvasExample;\r\n","import { Button, Card, OverlayProps, OverlayTrigger, Popover } from 'react-bootstrap';\r\n\r\ntype DirectionsType = {\r\n    placement: OverlayProps['placement'];\r\n};\r\n\r\nconst Popovers = () => {\r\n    const directions: DirectionsType[] = [\r\n        { placement: 'top' },\r\n        { placement: 'bottom' },\r\n        { placement: 'right' },\r\n        { placement: 'left' },\r\n    ];\r\n\r\n    return (\r\n        <Card id=\"popovers\">\r\n            <Card.Body>\r\n                <Card.Title as=\"h5\" className=\"mb-0\">\r\n                    Popovers\r\n                </Card.Title>\r\n                <p className=\"sub-header\">\r\n                    Add small overlays of content, like those on the iPad, to any element for housing secondary\r\n                    information.\r\n                </p>\r\n\r\n                <div className=\"button-list\">\r\n                    {(directions || []).map((item) => (\r\n                        <OverlayTrigger\r\n                            trigger=\"click\"\r\n                            key={item.placement}\r\n                            placement={item.placement}\r\n                            overlay={\r\n                                <Popover popper id={`popover-positioned-${item.placement}`}>\r\n                                    <Popover.Body>\r\n                                        Vivamus sagittis lacus vel augue laoreet rutrum faucibus.\r\n                                    </Popover.Body>\r\n                                </Popover>\r\n                            }\r\n                        >\r\n                            <Button className=\"btn-soft-primary me-2 mb-2 mb-xxl-0\">Popover on {item.placement}</Button>\r\n                        </OverlayTrigger>\r\n                    ))}\r\n\r\n                    <OverlayTrigger\r\n                        trigger=\"focus\"\r\n                        placement=\"right\"\r\n                        overlay={\r\n                            <Popover popper id={`popover-dismissible`}>\r\n                                <Popover.Body>And here's some amazing content. It's very engaging. Right?</Popover.Body>\r\n                            </Popover>\r\n                        }\r\n                    >\r\n                        <Button className=\"me-2 mb-2 mb-xxl-0\">Dismissible popover</Button>\r\n                    </OverlayTrigger>\r\n                </div>\r\n            </Card.Body>\r\n        </Card>\r\n    );\r\n};\r\n\r\nexport default Popovers;\r\n","import { Button, Card, OverlayProps, OverlayTrigger, Tooltip } from 'react-bootstrap';\r\n\r\ntype DirectionsType = {\r\n    placement: OverlayProps['placement'];\r\n};\r\n\r\nconst Tooltips = () => {\r\n    const directions: DirectionsType[] = [\r\n        { placement: 'top' },\r\n        { placement: 'bottom' },\r\n        { placement: 'right' },\r\n        { placement: 'left' },\r\n    ];\r\n\r\n    return (\r\n        <Card id=\"tooltips\">\r\n            <Card.Body>\r\n                <Card.Title as=\"h5\" className=\"mb-0\">\r\n                    Tooltips\r\n                </Card.Title>\r\n                <p className=\"sub-header\">\r\n                    Examples for adding custom Bootstrap tooltips with CSS and JavaScript using CSS3 for animations and\r\n                    data-attributes for local title storage.\r\n                </p>\r\n\r\n                <div className=\"button-list\">\r\n                    {(directions || []).map((item) => (\r\n                        <OverlayTrigger\r\n                            key={item.placement}\r\n                            placement={item.placement}\r\n                            overlay={\r\n                                <Tooltip id={`tooltip-${item.placement}`}>\r\n                                    Tooltip on <strong>{item.placement}</strong>.\r\n                                </Tooltip>\r\n                            }\r\n                        >\r\n                            <Button className=\"btn-soft-primary me-2\">Tooltip on {item.placement}</Button>\r\n                        </OverlayTrigger>\r\n                    ))}\r\n                </div>\r\n            </Card.Body>\r\n        </Card>\r\n    );\r\n};\r\n\r\nexport default Tooltips;\r\n","// types\r\nimport { MenuItem } from 'types';\r\n\r\nexport const rightMenuItems: MenuItem[] = [\r\n    {\r\n        key: 'alerts',\r\n        label: 'Alerts',\r\n    },\r\n    {\r\n        key: 'accordions',\r\n        label: 'Accordions',\r\n    },\r\n    {\r\n        key: 'badges',\r\n        label: 'Badges',\r\n    },\r\n    {\r\n        key: 'breadcrumb',\r\n        label: 'Breadcrumb',\r\n    },\r\n    {\r\n        key: 'buttons',\r\n        label: 'Buttons',\r\n    },\r\n    {\r\n        key: 'cards',\r\n        label: 'Cards',\r\n    },\r\n    {\r\n        key: 'carousel',\r\n        label: 'Carousel',\r\n    },\r\n    {\r\n        key: 'dropdowns',\r\n        label: 'Dropdowns',\r\n    },\r\n    {\r\n        key: 'forms',\r\n        label: 'Form Elements',\r\n    },\r\n    {\r\n        key: 'tabs',\r\n        label: 'Tabs',\r\n    },\r\n    {\r\n        key: 'modals',\r\n        label: 'Modals',\r\n    },\r\n    {\r\n        key: 'progressbars',\r\n        label: 'Progress',\r\n    },\r\n    {\r\n        key: 'pagination',\r\n        label: 'Pagination',\r\n    },\r\n    {\r\n        key: 'spinners',\r\n        label: 'Spinners',\r\n    },\r\n    {\r\n        key: 'offcanvas',\r\n        label: 'Offcanvas',\r\n    },\r\n    {\r\n        key: 'popovers',\r\n        label: 'Popovers',\r\n    },\r\n    {\r\n        key: 'tooltips',\r\n        label: 'Tooltips',\r\n    },\r\n];\r\n","import { Col } from 'react-bootstrap';\r\n\r\n// components\r\nimport DocsLayout from '../layout';\r\n\r\nimport Alerts from './Alerts';\r\nimport AccordionExample from './Accordions';\r\nimport Badges from './Badges';\r\nimport Breadcrumbs from './Breadcrumb';\r\nimport Buttons from './Buttons';\r\nimport Cards from './Card';\r\nimport Carousels from './Carousel';\r\nimport Dropdowns from './Dropdown';\r\nimport FormElements from './FormsElement';\r\nimport TabsExample from './Tabs';\r\nimport Modals from './Modals';\r\nimport Progressbars from './Progressbars';\r\nimport Paginations from './Pagination';\r\nimport Spinners from './Spinners';\r\nimport OffcanvasExample from './Offcanvas';\r\nimport Popovers from './Popovers';\r\nimport Tooltips from './Tooltips';\r\n\r\n// types\r\nimport { Variant } from '../types';\r\n\r\n// dummy data\r\nimport { rightMenuItems } from './data';\r\n\r\nconst variants: Variant[] = ['primary', 'secondary', 'success', 'danger', 'warning', 'info', 'orange', 'dark'];\r\n\r\nconst BootstrapExample = () => {\r\n    return (\r\n        <DocsLayout rightMenuItems={rightMenuItems}>\r\n            <Col xs={12} lg={{ offset: 3, span: 9 }} xl={{ offset: 2, span: 8 }}>\r\n                <Alerts />\r\n                <AccordionExample />\r\n                <Badges variants={variants} />\r\n                <Breadcrumbs />\r\n                <Buttons variants={variants} />\r\n                <Cards />\r\n                <Carousels />\r\n                <Dropdowns />\r\n                <FormElements />\r\n                <TabsExample />\r\n                <Modals />\r\n                <Progressbars />\r\n                <Paginations />\r\n                <Spinners variants={variants} />\r\n                <OffcanvasExample />\r\n                <Popovers />\r\n                <Tooltips />\r\n            </Col>\r\n        </DocsLayout>\r\n    );\r\n};\r\n\r\nexport default BootstrapExample;\r\n"],"names":["OutlineAlerts","useState","alertVariants","setAlertVariants","map","color","index","Alert","variant","onClose","list","splice","handleClose","dismissible","className","classNames","length","toString","DefaultAlerts","Card","id","as","Row","Col","xxl","CustomToggle","children","eventKey","containerClass","linkClass","callback","activeEventKey","useContext","AccordionContext","decoratedOnClick","useAccordionButton","isCurrentEventKey","to","collapsed","onClick","icon","CustomAccordion","item","String","title","Accordion","text","accordianContent","defaultActiveKey","variants","Badge","bg","Button","charAt","toUpperCase","slice","pill","Breadcrumb","active","href","buttonVariants1","buttonVariants2","size","rel","pathname","target","xl","src","CardImg1","alt","md","DefaultCarousel","Carousel","FirstSlide","SecondSlide","ThirdSlide","CaptionCarousel","DefaultDropdown","Dropdown","SpiltDropdown","ButtonGroup","split","DropdownDiretion","DropdownButton","align","drop","renderMenuOnMount","CustomeDropdown","htmlFor","type","placeholder","BasicFormInput","Form","sm","controlId","defaultValue","rows","value","multiple","FormInputSize","Checkbox","label","Radio","name","Range","tabContents","text2","NavTabs","Tab","Nav","tab","NavPills","justify","StandardModal","show","setShow","Modal","onHide","closeButton","selected","ModalSizes","setSize","openModalWithSize","VerticallyCenteredModal","showCenteredModal","setShowCenteredModal","centered","ScrollableModal","showScrollableModal","setShowScrollableModal","scrollable","ModalWithAlerts","showSuccessModal","setShowSuccessModal","showErrorModal","setShowErrorModal","ProgressBar","now","striped","animated","style","height","Pagination","Spinner","animation","OffcanvasPlacement","placement","toggle","prevState","Offcanvas","option","OverlayTrigger","trigger","overlay","Popover","popper","Tooltip","rightMenuItems","key","xs","lg","offset","span","Tabs"],"sourceRoot":""}